@model EImece.Domain.Entities.List
@using EImece.Domain.Models.Enums;
@using EImece.Domain.Helpers.Extensions;
@using Resources;

@{
    var saveButtonText = AdminResource.SaveButtonText;
    ViewBag.Title = "SaveOrEdit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var itemText = Model.GetListItemText();
}

<h2>@AdminResource.ProductSpecTemplateItemList</h2>
<hr class="adminLine" />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
       @Html.ValidationSummary(true, "", new { @class = "alert alert-success" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CreatedDate)
        @Html.HiddenFor(model => model.UpdatedDate)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsService, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsService)
                    @Html.ValidationMessageFor(model => model.IsService, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsValues, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsValues)
                    @Html.ValidationMessageFor(model => model.IsValues, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for=" ListItems"> List Items:</label>
            <div class="col-md-10">
                <span style="font-size: small">Put each list item on a new line. Divide the displayed text and values with a comma.</span><br />
                @Html.TextAreaFor(m => itemText, new { cols = 50, rows = 10 })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@saveButtonText" class="btn btn-success btn-block" />
            </div>
        </div>

        @if (Model.ListItems != null && Model.ListItems.Any())
        {

            foreach (var item in Model.ListItems)
            {
                <div>
                    Text: @(item.Name), Value: @(item.Value), Order: @(item.Position)
                </div>
            }
        }
    </div>
}

<div>
    @Html.ActionLink(AdminResource.BackToList, "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}