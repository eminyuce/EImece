@model List<List>
@using EImece.Domain.Helpers;

@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using EImece.Domain.Models.Enums;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Entities;
@using Resources;

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? AppConfig.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Lists";
    var title = "Lists";
    var gridName = "ListGrid";
    var contents = Model;
    var baseList = contents.DownCasting();

    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;
    var gridMainPageImageText = AdminResource.GridMainPageImageText;

}

<h2>@AdminResource.ProductSpecTemplateItemList</h2>
<hr class="adminLine" />

<div class="panel panel-info">

    @Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
            {"controllerName",controllerName}
                      ,{"StateTypes","State"}
           ,{"orderingButton",true}
           ,{"selectAll",true}
           ,{"deleteAll",true}
            ,{"SetStateOnOrOff",true}})
</div>
<div class="panel panel-primary">
    @Html.Partial("pGridDropDown", baseList)
    @Html.Grid(contents).Named(gridName).Columns(columns =>
{

columns.Add().Encoded(false).
       Sanitized(false).
       SetWidth(10).
       RenderValueAs(o => String.Format("<input gridkey-id='{0}'  class='gridCheckboxes'  name='checkboxGrid' type='checkbox'>", o.Id));

columns.Add(o => o.Id, true);

columns.Add()
       .Encoded(false)
       .Sanitized(false)
       .SetWidth(30)
       .RenderValueAs(d =>
@<b>
    @Html.ActionLink(" ", "SaveOrEdit", controllerName, new { id = d.Id }, new { @class = "btn btn-primary  btn-xs   glyphicon glyphicon-pencil glyphicon-white   " })
</b>);

    if (UserRoleHelper.IsDeletedEnableRoles())
    {
        columns.Add()
             .Encoded(false)
             .Sanitized(false)
             .SetWidth(30)
             .RenderValueAs(d => Html.Partial("pDeleteModal", new ViewDataDictionary(ViewData) {
        { "ItemId", d.Id },
            {"controllerName",controllerName},
            { "DeleteIcon", "gridBtn  btn btn-danger btn-xs   glyphicon  glyphicon-remove-circle" },
            { "ItemDescription", d.Name }

             }));

    }

    columns.Add(c => c.Name)
       .Titled("Title")
       .Filterable(true);

    columns.Add(o => o.IsService)
            .Titled(AdminResource.IsService)
            .Sortable(true)
            .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
             Sanitized(false)
            .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}'  {1}  name='spanImageState'></span>",
                                              o.Id, (o.IsService ? Constants.OkStyle : Constants.CancelStyle), o.IsService));

    columns.Add(o => o.IsValues)
          .Titled(AdminResource.IsValues)
          .Sortable(true)
          .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
           Sanitized(false)
          .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}'  {1}  name='spanImageState'></span>",
                                            o.Id, (o.IsValues ? Constants.OkStyle : Constants.CancelStyle), o.IsValues));

}).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)
</div>