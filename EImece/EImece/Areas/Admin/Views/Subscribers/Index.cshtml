@model List<Subscriber>
@using EImece.Domain.Helpers;
@using GridMvc.Html
@using GridMvc.Sorting;
@using EImece.Domain;
@using EImece.Domain.Models.Enums;
@using EImece.Domain.Entities;
@using Resources;
@using EImece.Domain.Helpers.Extensions;
@{
    ViewBag.Title = "Subscribers";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? AppConfig.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Subscribers";
    var title = "Subscribers";
    var gridName = "SubscriberGrid";
    var contents = Model;
    var baseList = contents.DownCasting();
    var search = Request.QueryString["search"].ToStr();
    var ExportToExcel = AdminResource.ExportToExcel;
}

<h2>@AdminResource.Subscribers</h2>
<hr class="adminLine" />

@Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
        {"controllerName",controllerName}
        ,{"StateTypes","State"}
       ,{"orderingButton",false}
       ,{"selectAll",true}
       ,{"deleteAll",true}
        ,{"SetStateOnOrOff",true},
{ "IsNewRecordButtonEnabled",false},{"IsExcelButtonEnabled",true}})
<div class="panel panel-primary">
    @Html.Partial("pGridDropDown", baseList)

    @Html.Grid(contents).Named(gridName).Columns(columns =>
{

    columns.Add(o => o.Id, true);
    columns.Add()
.Encoded(false)
.Sanitized(false)
.Css("gridButtons")
.RenderValueAs(d => Html.Partial("pGridCheckbox", new ViewDataDictionary(ViewData){
            {"ItemId",d.Id}}));

    columns.Add(c => c.Name)
           .Titled(AdminResource.Name)
           .Filterable(true);

    columns.Add(c => c.Email)
     .Titled(AdminResource.Email)
     .Filterable(true);

    columns.Add(o => o.Note)
   .Titled(AdminResource.Note)
   .Encoded(false).
        Sanitized(false).
        SetWidth(10).
        RenderValueAs(o => String.Format("<textarea readonly  style='height: 146px; background-color: transparent; width: 399px; margin: 0px;'>{0}</textarea>", o.Note));

    columns.Add(o => o.UpdatedDate)
               .Titled(AdminResource.UpdatedDate)
           .Sortable(true)
           .Css("gridDateClass")
           .RenderValueAs(o => o.UpdatedDate != null ? String.Format("{0}", o.UpdatedDate.ToShortDateString()) : null)
           .SortInitialDirection(GridSortDirection.Descending);

}).SetRowCssClasses(item => item.IsActive ? string.Empty : "GridIsActive").WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)
</div>