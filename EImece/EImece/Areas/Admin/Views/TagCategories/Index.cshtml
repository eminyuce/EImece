@model List<TagCategory>
@using EImece.Domain.Helpers;
@using SharkDev.MVC
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using EImece.Domain.Models.Enums;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Entities;
@using Resources;

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? Settings.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "TagCategories";
    var title = "TagCategories";
    var gridName = "TagCategoriesGrid";
    var contents = Model;

    var baseList = contents.DownCasting();

    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;
    var gridMainPageImageText = AdminResource.GridMainPageImageText;

}

<h2>Index</h2>


<div class="panel panel-info">
   
    @Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
            {"controllerName",controllerName}
            ,{"stateSelectionDropDown",false}
           ,{"orderingButton",true}
           ,{"selectAll",true}
           ,{"deleteAll",true}
            ,{"SetStateOnOrOff",true}})

</div>
<div class="panel panel-primary">
    @Html.Partial("pGridDropDown", baseList)
    @Html.Grid(contents).Named(gridName).Columns(columns =>
{

columns.Add().Encoded(false).
       Sanitized(false).
       SetWidth(10).
       RenderValueAs(o => String.Format("<input gridkey-id='{0}'  class='gridCheckboxes'  name='checkboxGrid' type='checkbox'>", o.Id));

columns.Add(o => o.Id, true);

columns.Add()
       .Encoded(false)
       .Sanitized(false)
       .SetWidth(30)
       .RenderValueAs(d =>
    @<b>
        @Html.ActionLink(gridEditText, "SaveOrEdit", controllerName, new { id = d.Id }, new { @class = "btn btn-primary btn-sm     " })
    </b>);

columns.Add()
       .Encoded(false)
       .Sanitized(false)
       .SetWidth(30)
       .RenderValueAs(d =>
    @<b>
        @Html.ActionLink(gridDetailText, "Details", controllerName, new { id = d.Id }, new { @class = "btn btn-default btn-sm     " })
    </b>);
 

columns.Add()
             .Encoded(false)
             .Sanitized(false)
             .SetWidth(30)
             .RenderValueAs(d =>
            @<b>
                @Html.ActionLink(gridDeleteText, "Delete", controllerName, new { id = d.Id }, new { @class = "btn btn-danger btn-sm " })
            </b>);

columns.Add(c => c.Name)
       .Titled("Title")
       .Filterable(true);


columns.Add(c => c.TagType)
.Titled("TagType")
.Sanitized(false)
.Encoded(false)
.Filterable(true).RenderValueAs(d =>
                @<span>
                    @String.Format("{0}", (EImeceTagType)d.TagType)
                </span>);

                           columns.Add(o => o.Position)
                              .Encoded(false).
                                   Sanitized(false).
                                   SetWidth(10).
                                   RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

                           columns.Add(o => o.IsActive)
                                  .Titled("State")
                                  .Sortable(true)
                                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                                   Sanitized(false)
                                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                                    o.Id, (o.IsActive ? Settings.OkStyle : Settings.CancelStyle), o.IsActive));

                           columns.Add(o => o.CreatedDate)
                                  .Titled("Date")
                                  .Sortable(true)
                                  .Css("gridDateClass")
                                  .RenderValueAs(o => o.CreatedDate != null ? String.Format("{0}", o.CreatedDate.Value.ToShortDateString()) : null)
                                  .SortInitialDirection(GridSortDirection.Descending);





                       }).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)

</div>
