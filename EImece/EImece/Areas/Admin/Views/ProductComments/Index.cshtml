@model List<ProductComment>
@using EImece.Domain.Helpers;
@using GridMvc.Html
@using GridMvc.Sorting;
@using EImece.Domain;
@using EImece.Domain.Models.Enums;
@using EImece.Domain.Entities;
@using Resources;
@using EImece.Domain.Helpers.Extensions;
@{
    ViewBag.Title = "ProductComments";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? AppConfig.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "ProductComments";
    var gridName = "ProductCommentGrid";
    var contents = Model;
    var baseList = contents.DownCasting();
    var search = Request.QueryString["search"].ToStr();
    var ExportToExcel = AdminResource.ExportToExcel;
    Product product = ViewBag.Product;

    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;
    var gridMainPageImageText = AdminResource.GridMainPageImageText;

}

<h2>@AdminResource.ProductComments</h2>
<hr class="adminLine" />
<div class="row">
    <div class="col-md-4">
        <h3>
            @Html.DisplayFor(model => product.Name)
            @Html.ActionLink(AdminResource.BackToList, "index", "products", new { search = product.Name }, new { @class = "btn btn-link" })
        </h3>
    </div>
    <div class="col-md-8">
    </div>
</div>
@Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
        {"controllerName",controllerName}
        ,{"StateTypes","State"}
       ,{"orderingButton",false}
       ,{"selectAll",true}
       ,{"deleteAll",true}  ,{"IdValueExists",true}
        ,{"SetStateOnOrOff",true},
{ "IsNewRecordButtonEnabled",false},{"IsExcelButtonEnabled",true}})
<div class="panel panel-primary">
    @Html.Partial("pGridDropDown", baseList)

    @Html.Grid(contents).Named(gridName).Columns(columns =>
{

    columns.Add(o => o.Id, true);
    columns.Add()
.Encoded(false)
.Sanitized(false)
.Css("gridButtons")
.RenderValueAs(d => Html.Partial("pGridCheckbox", new ViewDataDictionary(ViewData){
            {"ItemId",d.Id}}));

    if (UserRoleHelper.IsDeletedEnableRoles())
    {
        columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(d => Html.Partial("pDeleteModal", new ViewDataDictionary(ViewData) {
            { "ItemId", d.Id },
            {"controllerName",controllerName},
            { "DeleteText", gridDeleteText },
            { "DeleteIcon", "gridBtn btn btn-danger btn-sm glyphicon  glyphicon-remove-circle" },
            { "ItemDescription", d.Subject+ " "+d.Review  } }));

    }

    columns.Add(c => c.Subject)
           .Titled(AdminResource.ReviewSubject)
           .Filterable(true);

    columns.Add(c => c.Email)
     .Titled(AdminResource.Email)
     .Filterable(true);

    columns.Add(o => o.IsActive)
                           .Titled(AdminResource.IsActive)
                       .Sortable(true)
                       .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                        Sanitized(false)
                       .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                         o.Id, (o.IsActive ? Constants.OkStyle : Constants.CancelStyle), o.IsActive));

    columns.Add(c => c.Rating)
.Titled(AdminResource.Rating)
.Filterable(true)
.Encoded(false).
    Sanitized(false).
    SetWidth(10).
    RenderValueAs(o => String.Format("{0} Yıldız", o.Rating));

    columns.Add(o => o.Review)
   .Titled(AdminResource.Review)
   .Encoded(false).
        Sanitized(false).
        SetWidth(10).
        RenderValueAs(o => String.Format("<textarea readonly  style='height: 146px; background-color: transparent; width: 399px; margin: 0px;'>{0}</textarea>", o.Review));

    columns.Add(o => o.UpdatedDate)
               .Titled(AdminResource.UpdatedDate)
           .Sortable(true)
           .Css("gridDateClass")
           .RenderValueAs(o => o.UpdatedDate != null ? String.Format("{0}", o.UpdatedDate.ToShortDateString()) : null)
           .SortInitialDirection(GridSortDirection.Descending);

}).SetRowCssClasses(item => item.IsActive ? string.Empty : "GridIsActive").WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)
</div>