@using EImece.Models;
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain.Helpers;
@using EImece.Domain;
@using EImece.Domain.Entities;
@using Resources;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Models.Enums;
@model List<Order>
@{
    var orders = Model;

    ViewBag.Title = "Orders";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? AppConfig.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Orders";
    var gridDeleteText = AdminResource.GridDeleteText;
    var title = "Orders";
    var gridName = "OrdersGrid";
    var contents = Model;

    var gridImagesText = AdminResource.GridImagesText;

    var GridResultRecordNumber = AdminResource.GridResultRecordNumber;
    var GridPagingDropDownText = AdminResource.GridPagingDropDownText;
}
<h2>@AdminResource.Customers</h2>
<hr class="adminLine" />

<div class="panel panel-info">
    <div class="row">
        <span class="col-md-12">
            @Html.Partial("pSearchForm")
        </span>
    </div>
</div>
<div class="panel panel-primary">
    <div class="panel-heading">
        <div class="row">
            <span class="col-md-6">
                <span class="label ">
                    <span class="badge text-danger text-large">@contents.Count() </span>
                    @GridResultRecordNumber
                </span>
            </span>
            <span class="col-md-3">
                <p class="text-right">@GridPagingDropDownText</p>
            </span>
        </div>
    </div>
    @Html.Grid(contents).Named(gridName).Columns(columns =>
{

    columns.Add()
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(30)
    .RenderValueAs(d => Html.Partial("pDeleteModal", new ViewDataDictionary(ViewData) {
{ "ItemId", d.UserId },
{"controllerName",controllerName},
{ "DeleteText", gridDeleteText },
{ "ItemDescription", String.Format("{0} {1}", d.Name, d.Surname) } }));

       

columns.Add()
.Encoded(false)
.Sanitized(false)
.SetWidth(30)
.RenderValueAs(d => @<b>
        @Html.ActionLink(AdminResource.CustomerComingOrders, "CustomerOrders", controllerName, new { id = d.UserId }, new { @class = "btn btn-success btn-sm     " })
    </b>);

    columns.Add(o => o.Name)
    .Encoded(false)
    .Titled(AdminResource.Name)
    .RenderValueAs(o => String.Format("{0} {1}", o.Name, o.Surname));

    columns.Add(c => c.Orders.Count)
    .Titled(AdminResource.TotalOrderNumber)
    .Filterable(true);

    columns.Add(c => c.GsmNumber).Titled(AdminResource.PhoneNumber);
    columns.Add(c => c.Email).Titled(AdminResource.Email);

    columns.Add(c => c.Gender)
    .Encoded(false)
    .Sanitized(false)
    .RenderValueAs(c => GetGenderText(c.Gender))
    .Titled(AdminResource.Gender)
    .Filterable(true);

    columns.Add(o => o.RegistrationAddress)
.Titled(AdminResource.CustomerRegistrationAddress)
.Encoded(false).
    Sanitized(false).
    SetWidth(10).
    RenderValueAs(o => String.Format("<textarea readonly  style='height: 40px; background-color: transparent; width: 300px; margin: 0px;'>{0}</textarea>", o.RegistrationAddress));

    columns.Add(o => o.CreatedDate)
    .Titled(AdminResource.CustomerRegistrationDate)
    .Sortable(true)
    .Css("gridDateClass")
    .RenderValueAs(o => o.CreatedDate != null ? String.Format("{0}", o.CreatedDate.ToShortDateString()) : null)
    .SortInitialDirection(GridSortDirection.Descending);

}).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)
</div>

@helper GetGenderText(int gender)
{
    var genderEnum = (GenderType)gender;
    if (GenderType.Man == genderEnum)
    {
<b>@AdminResource.ManGender</b>
    }
    else if (GenderType.Woman == genderEnum)
    {
<b>@AdminResource.WomanGender</b>
        }

}