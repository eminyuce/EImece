@using System.Xml;
@using System.Linq;
@using System.Text;
@using System.Xml.Linq;
@using EImece.Domain.Entities;
@using Resources;
@model Product
@{
    ViewBag.Title = "Details";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var template = (Template)ViewBag.Template;
    var specs = Model.ProductSpecifications;
    var saveButtonText = AdminResource.SaveButtonText;
    var ExistingMainImageText = AdminResource.ExistingMainImageText;
}

<h2>Details</h2>

<div>
    <h4>Product</h4>
    <hr />
 

        @using (Html.BeginForm("SaveOrEditProductSpecs", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {


            <dt>
                @Html.DisplayNameFor(model => model.Name)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Name)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Description)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Description)
            </dd>

            @Html.HiddenFor(model => model.Id)

            if (!String.IsNullOrEmpty(template.TemplateXml))
            {
                XDocument xdoc = XDocument.Parse(template.TemplateXml);
                var groups = xdoc.Root.Descendants("group");

                if (groups.Any())
                {
                    <input id="templateId" name="templateId" type="hidden" value="@template.Id">

                    foreach (var group in groups)
                    {
                        if (group.FirstAttribute != null)
                        {

                            <h3>
                                @group.FirstAttribute.Value
                            </h3>

                        }


                        foreach (XElement field in group.Elements())
                        {

                            var name = field.Attribute("name");
                            var unit = field.Attribute("unit");
                            var values = field.Attribute("values");
                            var display = field.Attribute("display");
                            var dbValueObj = specs.FirstOrDefault(r => r.Name.Equals(name.Value, StringComparison.InvariantCultureIgnoreCase));

                            if (dbValueObj == null)
                            {
                                dbValueObj = new ProductSpecification();
                            }

                            dbValueObj.FieldFormat = field;
                            <div>
                                @Html.EditorFor(model => dbValueObj, field.Name.LocalName)
                            </div>
                        }
                    }


                }
            }
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="@saveButtonText" class="btn btn-default" />
                </div>
            </div>
 
    }

 
 
