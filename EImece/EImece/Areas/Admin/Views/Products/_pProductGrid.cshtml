@model List<Product>
@using EImece.Domain.Helpers;

@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using Resources;
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.Extensions;

@{

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? AppConfig.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Products";
    var title = "Products";
    var gridName = "productGrid";
    var contents = Model;
    var baseList = contents.DownCasting<Product>();

    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;
    var gridMainPageImageText = AdminResource.GridMainPageImageText;

}
<div class="row">
    <div class="col-md-12">

        @Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
            {"controllerName",controllerName}
                     ,{"StateTypes","State,ImageState,MainPage"}
           ,{"orderingButton",true}
           ,{"selectAll",true}
           ,{"deleteAll",true}
            ,{"SetStateOnOrOff",true}})

        <div class="panel panel-primary">

            @Html.Partial("pGridDropDown", baseList)

            @Html.Grid(contents).Named(gridName).Columns(columns =>
                       {

                           columns.Add().Encoded(false).
                                   Sanitized(false).
                                   SetWidth(10).
                                   RenderValueAs(o => String.Format("<input gridkey-id='{0}'  class='gridCheckboxes'  name='checkboxGrid' type='checkbox'>", o.Id));

                           columns.Add(o => o.Id, true);

                           columns.Add()
                                  .Encoded(false)
                                  .Sanitized(false)
                                  .SetWidth(30)
                                  .RenderValueAs(d =>
                                @<b>
                                    @Html.ActionLink(gridEditText, "Index", controllerName, new { id = d.Id }, new { @class = "btn btn-primary btn-sm" })
                                </b>);

                       columns.Add()
                                      .Encoded(false)
                                      .Sanitized(false)
                                      .SetWidth(30)
                                      .RenderValueAs(d =>
                                    @<b>
                                        @Html.ActionLink("Add Specs", "SaveOrEditProductSpecs", controllerName, new { Id = d.Id }, new { @class = "btn btn-default  btn-sm" })
                                    </b>);

                           columns.Add()
                                  .Encoded(false)
                                  .Sanitized(false)
                                  .SetWidth(30)
                                  .RenderValueAs(d =>
                                @<b>
                                    @Html.ActionLink(gridDetailText, "Details", controllerName, new { id = d.Id }, new { @class = "btn btn-info btn-sm" })
                                </b>);

                       columns.Add()
                              .Encoded(false)
                              .Sanitized(false)
                              .SetWidth(30)
                              .RenderValueAs(d =>
                            @<b>
                                @Html.ActionLink(gridImagesText, "Media", controllerName, new { Id = d.Id }, new { @class = "btn btn-default  btn-sm" })
                            </b>);

                       columns.Add()
                                    .Encoded(false)
                                    .Sanitized(false)
                                    .SetWidth(30)
                                    .RenderValueAs(d =>
                                    @<b>
                                        @Html.ActionLink(gridDeleteText, "Delete", controllerName, new { id = d.Id }, new { @class = "btn btn-danger btn-sm" })
                                    </b>);

                           columns.Add(c => c.Name)
                                   .Titled(AdminResource.Name)
                                  .Filterable(true)
                                   .Encoded(false)
                                    .Sanitized(false)
                              .RenderValueAs(d =>
                                                @<b>
                                                    @Html.ActionLink(d.Name, "ProductDetail", "Products", new { area="", id = d.Id }, new { @class = "btn btn-link" })
                                                </b>);

                            columns.Add(o => o.Position).Titled(AdminResource.Position)
                              .Encoded(false).
                                   Sanitized(false).
                                   SetWidth(10).
                                   RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

                           columns.Add(o => o.IsActive)
                                      .Titled(AdminResource.IsActive)
                                  .Sortable(true)
                                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                                   Sanitized(false)
                                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                                    o.Id, (o.IsActive ? Constants.OkStyle : Constants.CancelStyle), o.IsActive));

                           columns.Add(o => o.ImageState)
                                      .Titled(AdminResource.ImageState)
                                  .Sortable(true)
                                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                                   Sanitized(false)
                                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}'  {1}  name='spanImageState'></span>",
                                                                    o.Id, (o.ImageState ? Constants.OkStyle : Constants.CancelStyle), o.ImageState));

                           columns.Add(o => o.MainPage)
                                      .Titled(AdminResource.MainPage)
                                  .Sortable(true)
                                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                                   Sanitized(false)
                                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}'  grid-data-value='{2}' {1} name='spanMainPage' ></span>",
                                                                    o.Id, (o.MainPage ? Constants.OkStyle : Constants.CancelStyle), o.MainPage));

                           columns.Add(o => o.CreatedDate)
                                      .Titled(AdminResource.CreatedDate)
                                  .Sortable(true)
                                  .Css("gridDateClass")
                                  .RenderValueAs(o => o.CreatedDate != null ? String.Format("{0}", o.CreatedDate.ToShortDateString()) : null)
                                  .SortInitialDirection(GridSortDirection.Descending);

                           columns.Add()
                                     .Titled(AdminResource.Images)
                                 .Encoded(false)
                                 .Sanitized(false)

                                 .SetWidth(30)
                                 .RenderValueAs(d => Html.Partial("pGridImageMainPage", d));

                       }).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)
        </div>
    </div>
</div>