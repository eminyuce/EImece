@model EImece.Domain.Entities.Product
@using EImece.Domain.Entities;
@using SharkDev.MVC
@using EImece.Domain.Models.Enums;
@using SharkDev.Web.Controls.TreeView.Model;
@using Resources;
@using EImece.Domain;
@using EImece.Domain.Helpers;
@using EImece.Domain.Helpers.Extensions;
@{
    var saveButtonText = AdminResource.SaveButtonText;
    var saveButtonAndCloseText = AdminResource.SaveButtonAndCloseText;
    var ExistingMainImageText = AdminResource.ExistingMainImageText;
    ViewBag.Title = "SaveOrEdit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var productCategory = (ProductCategory)ViewBag.ProductCategory;
    var productTree = (List<Node>)ViewBag.Tree;
    Setting isProductPriceEnable = ViewBag.IsProductPriceEnable;
    var PleaseSelectYourProductCategoryFromTree = AdminResource.PleaseSelectYourProductCategoryFromTree;
    Product product = (Product)Model;
}
<h2>@AdminResource.ProductPageTitle</h2>
<hr class="adminLine" />

<div class="row" style="padding:20px;">

    <div class="col-md-2">
        @if (productTree != null)
        {
            @Html.SharkDev().TreeView(settings =>
            {
                settings.Id = "treeViewContainer";
                settings.Header.Text = "Tree root - Animal";
                settings.Header.Visible = false;
                settings.Header.Expanded = true;
                settings.ClientHandlers.ContentSelect = @"function (e) {
console.log(e);
   $('#OldCategoryName').text(e.name);
   $('#ProductCategoryId').val(e.id);
}";
                settings.AutoCompleteHandler = Url.Content("~/Home/GetBySample");
                settings.Height = 300;
                settings.Width = 270;
                settings.DataOnClient = true;
            }).GetContent(productTree);
        }
    </div>
    <div class="col-md-10">

        @using (Html.BeginForm("SaveOrEdit", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.CreatedDate)
            @Html.HiddenFor(model => model.UpdatedDate)

            @Html.HiddenFor(model => model.Lang)

            <div class="panel with-nav-tabs panel-default">
                <div class="panel-heading">
                    <ul class="nav nav-tabs">
                        <li class="active"><a href="#tab1default" data-toggle="tab">@AdminResource.EntityShortFields</a></li>
                        <li><a href="#tab2default" data-toggle="tab">@AdminResource.EntityDescriptionPage</a></li>
                        <li class="Tools">
                            <input type="submit" name="saveButton" value="@saveButtonText" style="width:150px;" class="btn btn-success" />
                        </li>
                        <li class="Tools">
                            <input type="submit" name="saveButton" value="@saveButtonAndCloseText" style="width:150px;" class="btn btn-success" />
                        </li>
                        <li class="Tools"> @Html.ActionLink(AdminResource.BackToList, "Index", null, new { @class = "btn btn-default" })</li>
                    </ul>
                </div>
                <div class="panel-body">
                    <div class="tab-content">
                        <div id="tab1default" class="tab-pane fade in active">

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProductCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @if (productCategory != null && productCategory.Id > 0)
                                    {
                                        <span style="color:red;font-size:x-large" id="OldCategoryName">
                                            @productCategory.Name
                                        </span>
                                    }
                                    else
                                    {

                                        <span style="color:red;font-size:x-large" id="OldCategoryName">
                                            @PleaseSelectYourProductCategoryFromTree
                                        </span>
                                    }

                                    @Html.HiddenFor(model => model.ProductCategoryId)
                                    @Html.ValidationMessageFor(model => model.ProductCategoryId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.NameShort, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.NameShort, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.NameShort, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.MetaKeywords, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.MetaKeywords, 2, 20, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.MetaKeywords, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            @if (isProductPriceEnable.SettingValue.ToBool(true))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            }
                            else
                            {
                                @Html.HiddenFor(model => model.Price)
                                @Html.HiddenFor(model => model.Discount)
                            }

                            <div class="form-group">
                                <div class="col-md-3">
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.IsActive)
                                    @Html.EditorFor(model => model.IsActive)
                                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.MainPage)
                                    @Html.EditorFor(model => model.MainPage)
                                    @Html.ValidationMessageFor(model => model.MainPage, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.IsCampaign)
                                    @Html.EditorFor(model => model.IsCampaign)
                                    @Html.ValidationMessageFor(model => model.IsCampaign, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                                </div>
                            </div>




                            <div class="form-group">
                                @Html.LabelFor(model => model.MainImageId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    <input type="file" name="postedImage" />
                                    @Html.ValidationMessageFor(model => model.MainImageId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.ImageState)
                                    @Html.EditorFor(model => model.ImageState)
                                    @Html.ValidationMessageFor(model => model.ImageState, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3">
                                    @if (Model.MainImageId.HasValue)
                                    {
                                        <b>@ExistingMainImageText :</b>
                                        @Html.Partial("pGridImageMainPage", (BaseContent)Model);
                                    }
                                </div>
                            </div>
                            @Html.Partial("pSliderResizing", (BaseContent)Model)


                            <div class="form-group">
                                @Html.LabelFor(model => model.VideoUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.VideoUrl, 2, 20, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.VideoUrl, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                <label class="control-label col-md-2" for="Tags">Tags</label>
                                <div class="col-md-10">
                                    <div id="productTagsHtml">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="tab2default">
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.TextAreaFor(model => model.Description, new { @data_ckeditor_field = "product", @class = "form-control" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            setPreSelectedTreeNode($("#ProductCategoryId"))

            CreateTags();
            function CreateTags() {
                var postData = JSON.stringify({ "language": $("#Lang").val(), "productId": $("#Id").val() });
                console.log(postData);
                ajaxMethodCall(postData, "/admin/Ajax/GetProductTags", function (data) {
                    $("#productTagsHtml").html(data);
                });
            }

        });
    </script>
}