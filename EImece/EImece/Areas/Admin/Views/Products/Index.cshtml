@model List<Product>
@using EImece.Domain.Helpers;
@using SharkDev.MVC
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using Resources;
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.Extensions;

@{
    ViewBag.Title = "Products";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? ApplicationConfigs.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Products";
    var gridName = "productGrid";
    var contents = Model;
    ProductCategory selectedCategory = (ProductCategory)ViewBag.SelectedCategory;
    var products = Model;
    var baseList = contents.DownCasting<Product>();

    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;

    Setting isProductPriceEnable = ViewBag.IsProductPriceEnable;

}
<h2>@AdminResource.ProductPageTitle</h2>
<hr class="adminLine" />

<div class="row">
    <div class="col-md-2">

        @Html.SharkDev().TreeView(settings =>
    {
        settings.Id = "treeViewContainer";
        settings.Header.Visible = false;
        settings.Header.Expanded = true;
        settings.ClientHandlers.ContentSelect = @"function (e) {
            console.log(e);
            window.location='/admin/products/index/'+e.id;
            }";
        settings.AutoCompleteHandler = Url.Content("~/Home/GetBySample");
        settings.DataOnClient = true;
    }).GetContent(ViewBag.Tree)

        <span id="treeClickContainer"></span>
    </div>
    <div class="col-md-10">

        @if (selectedCategory != null)
        {
            <span>
                @{
                    <span>
                        @AdminResource.SelectedCategory
                    </span>
                    <b style="color:red;">
                        @String.Format("{0}", selectedCategory.Name)
                    </b>
                }

                <a href="@Url.Action("Index", "Products",new { id=0 })">
                    <span class="glyphicon glyphicon-remove-circle gridNotActiveIcon" aria-hidden="true"></span>
                </a>
            </span>

        }

        @Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
                            {"controllerName",controllerName}
            ,{"StateTypes","State,ImageState,MainPage,IsCampaign"}
           ,{"orderingButton",true}
           ,{"selectAll",true}
           ,{"deleteAll",true}
            ,{"SetStateOnOrOff",true} ,{"IsExcelButtonEnabled",true}})

        <div class="panel panel-primary">
            @Html.Partial("pGridDropDown", baseList)

            @Html.Grid(contents).Named(gridName).Columns(columns =>
       {

       columns.Add(o => o.Id, true);

       columns.Add()
                      .Encoded(false)
                      .Sanitized(false)
                       .Css("gridButtons")
                      .RenderValueAs(d => Html.Partial("pGridCheckbox", new ViewDataDictionary(ViewData){
            {"ItemId",d.Id}}));

       columns.Add(c => c.Name)
              .Titled(AdminResource.Name)
              .Filterable(true)
               .Encoded(false)
                .Sanitized(false)
          .RenderValueAs(d =>
                            @<div>
                         
            @Html.ActionLink(d.Name, "Detail", "Products", new { area = "", categoryName = GeneralHelper.GetUrlSeoString(d.ProductCategory.Name), id = d.GetSeoUrl() }, new { @class = "btn btn-sm btn-link", @target = "_blank" })
                                
            <div>
                                    @GridToolsColumnAlt(d, controllerName)
                                </div>
                            </div>

);

if (isProductPriceEnable.SettingValue.ToBool(true))
{
columns.Add(c => c.Price).Titled(AdminResource.Price);

}

columns.Add(c => c.ProductCode)
.Titled(AdminResource.ProductCode);

columns.Add(o => o.Position)
.Encoded(false).
Sanitized(false).
Css("smallGridColumn").
        @*SetWidth(10). *@
RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

columns.Add(o => o.IsActive)
.Titled(AdminResource.State)
.Sortable(true)
.Css("smallGridColumn")
.SortInitialDirection(GridSortDirection.Descending).Encoded(false).
Sanitized(false)
.RenderValueAs(o => GridImageActiveColumn(o, controllerName));

columns.Add(r => r.ImageState
)
.Titled(AdminResource.Images)
.Encoded(false)
.Sanitized(false)
.Css("smallGridColumn")
.RenderValueAs(o => GridImageColumn(o, controllerName));

}).SetRowCssClasses(item => item.IsActive ? string.Empty : "GridIsActive").WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)
        </div>
    </div>
</div>
@helper GridImageActiveColumn(Product o, String controllerName)
{
    <ul>
        <li>
            @Html.Raw(String.Format("<span gridkey-id='{0}' grid-data-value='{2}' {1} name='spanState'></span><span>{3}</span>",
                                                    o.Id, (o.IsActive ? ApplicationConfigs.OkStyle : ApplicationConfigs.CancelStyle), o.IsActive, AdminResource.State))
        </li>
        <li>
            @Html.Raw(String.Format("<span gridkey-id='{0}' grid-data-value='{2}' {1} name='spanMainPage'></span><span>{3}</span>",
                                                    o.Id, (o.MainPage ? ApplicationConfigs.OkStyle : ApplicationConfigs.CancelStyle), o.MainPage, AdminResource.MainPage))
        </li>
        <li>
            @Html.Raw(String.Format("<span gridkey-id='{0}' grid-data-value='{2}' {1} name='spanIsCampaign'></span><span>{3}</span>",
                                                    o.Id, (o.IsCampaign ? ApplicationConfigs.OkStyle : ApplicationConfigs.CancelStyle), o.IsCampaign, AdminResource.IsCampaign))
        </li>
    </ul>

}
@helper GridImageColumn(Product o, String controllerName)
{
    Boolean IsMainImageExists = FilesHelper.IsMainImageExists(o.MainImageId, o.MainImage);
    if (IsMainImageExists)
    {
        <ul>
            <li>
                @Html.Raw(String.Format("<span>{3}</span><span gridkey-id='{0}' grid-data-value='{2}' {1} name='spanImageState'></span>",
                                                        o.Id, (o.ImageState ? ApplicationConfigs.OkStyle : ApplicationConfigs.CancelStyle), o.ImageState, AdminResource.ImageState))
            </li>
            <li>
                @Html.Partial("pGridImageMainPage", o)
            </li>
        </ul>
    }
    else
    {
        <ul>
            <li>
                <b style="font-size:0.8em;">
                    No Image
                </b>
            </li>
        </ul>

    }

}

@helper GridToolsColumnAlt(Product d, String controllerName)
{

    <div class="gridToolBox">
        <span>
            @Html.ActionLink(" ", "Media", controllerName, new { Id = d.Id }, new { @class = "gridBtn btn  btn-default btn-xs     glyphicon glyphicon-camera glyphicon-white " })
        </span>
        <span>
            @Html.ActionLink(" ", "SaveOrEdit", controllerName, new { id = d.Id }, new { @class = "gridBtn btn btn-primary btn-xs   glyphicon glyphicon-pencil glyphicon-white " })
        </span>
        @if (d.ProductCategory.TemplateId.HasValue && d.ProductCategory.TemplateId > 0)
        {
            <span>
                @Html.ActionLink(" ", "SaveOrEditProductSpecs", controllerName, new { Id = d.Id }, new { @class = "gridBtn btn btn-xs  btn-default   glyphicon glyphicon-plus" })
            </span>
        }
        @if (UserRoleHelper.IsDeletedEnableRoles())
        {
            <span>
                @Html.Partial("pDeleteModal", new ViewDataDictionary(ViewData) {
           { "ItemId", d.Id },
           {"controllerName",controllerName},
           { "DeleteIcon", "gridBtn btn btn-danger btn-xs glyphicon  glyphicon-remove-circle" },
           { "ItemDescription", d.Name } })
            </span>
        }
    </div>

}

@section Scripts{
    <script>

        $(document).ready(function () {

        });
    </script>
}