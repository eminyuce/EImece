@model List<Product>
@using EImece.Domain.Helpers;

@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using Resources;
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Models.FrontModels;

@{
    ViewBag.Title = "Products";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var products = Model;
    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? AppConfig.GridPageSizeNumber : pageSizeNumber;
    var gridName = "productsGrid";
    var baseList = products.DownCasting<Product>();
    ProductCategory selectedCategory = (ProductCategory)ViewBag.SelectedCategory;

    List<ProductCategoryTreeModel> ProductCategoryTreeLeft = ViewBag.ProductCategoryTreeLeft;
    List<ProductCategoryTreeModel> ProductCategoryTreeRight = ViewBag.ProductCategoryTreeRight;

}
<h2>@AdminResource.MoveProductsInTrees</h2>
<hr class="adminLine" />

<div class="row">
    <div class="col-md-3">
        @Html.Partial("_ProductCategoryTree", ProductCategoryTreeLeft, new ViewDataDictionary(ViewData){
                        {"UrlPattern","/admin/products/MoveProductsInTrees/"}
                      ,{"IsExcelButtonEnabled",true}})

        <span id="treeClickContainer"></span>
    </div>
    <div class="col-md-6">
        @if (selectedCategory != null)
        {

            <span>
                @{
                    <span>
                        @AdminResource.SelectedCategory
                    </span>
                    <b style="color:red;">
                        @String.Format("{0}", selectedCategory.Name)
                    </b>
                }

                <a href="@Url.Action("MoveProductsInTrees", "Products",new { id=0 })">
                    <span class="glyphicon glyphicon-remove-circle gridNotActiveIcon" aria-hidden="true"></span>
                </a>
                <input type="hidden" id="selectedCategory" value="@selectedCategory.Id" />
                @if (!String.IsNullOrEmpty(ViewBag.MoveProductsMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @ViewBag.MoveProductsMessage
                    </div>
                }
            </span>

        }
        @Html.ActionLink(AdminResource.Products, "Index")
        <div class="panel panel-primary">
            @Html.Partial("pGridDropDown", baseList)
            @Html.Grid(products).Named(gridName).Columns(columns =>
       {

           columns.Add(o => o.Id, true);

           columns.Add()
                         .Encoded(false)
                         .Sanitized(false)
                          .Css("gridButtons")
                         .RenderValueAs(d => Html.Partial("pGridCheckbox", new ViewDataDictionary(ViewData){
               {"ItemId",d.Id}}));

           columns.Add(c => c.Name)
                  .Titled(AdminResource.Name)
                   .Encoded(false)
              .RenderValueAs(d =>
                                                                @<div>

                                                                    @Html.ActionLink(d.Name, "Detail", "Products", new { area = "", categoryName = GeneralHelper.GetUrlSeoString(d.ProductCategory.Name), id = d.GetSeoUrl() }, new { @class = "btn btn-sm btn-link", @target = "_blank" })
                                                                </div>

);

            columns.Add(o => o.IsActive)
            .Titled(AdminResource.IsActive)
            .Encoded(false).
            Sanitized(false)
            .RenderValueAs(o => String.Format("<span gridkey-id='{0}' grid-data-value='{2}' {1} name='spanState'> </span>",
            o.Id, (o.IsActive ? Constants.OkStyle : Constants.CancelStyle), o.IsActive));

            columns.Add(o => o.MainPage)
            .Titled(AdminResource.MainPage)
           .Encoded(false).
            Sanitized(false)
            .RenderValueAs(o => String.Format("<span gridkey-id='{0}' grid-data-value='{2}' {1} name='spanState'> </span>",
            o.Id, (o.IsActive ? Constants.OkStyle : Constants.CancelStyle), o.MainPage));

            columns.Add(o => o.IsCampaign)
            .Titled(AdminResource.IsCampaign)
           .Encoded(false).
            Sanitized(false)
            .RenderValueAs(o => String.Format("<span gridkey-id='{0}' grid-data-value='{2}' {1} name='spanState'> </span>",
            o.Id, (o.IsActive ? Constants.OkStyle : Constants.CancelStyle), o.IsCampaign));

            columns.Add(o => o.UpdatedDate)
            .Titled(AdminResource.UpdatedDate)
            .Css("gridDateClass")
            .RenderValueAs(o => String.Format("{0}", o.UpdatedDate.ToShortDateString()))
            .SortInitialDirection(GridSortDirection.Descending);

            }).SetRowCssClasses(item => item.IsActive ? string.Empty : "GridIsActive").WithPaging(pageSizeNumber).Sortable().Selectable(false)
        </div>
    </div>
    <div class="col-md-3">

        @Html.Partial("_ProductCategoryTree", ProductCategoryTreeRight, new ViewDataDictionary(ViewData){
                        {"UrlPattern",""}
                      ,{"IsExcelButtonEnabled",true}})
    </div>
</div>
@section Scripts{
    <script>

        function productTreeClick(e, id, name) {
            var productIdList = [];
            $("input[name=checkboxGrid]").each(function () {
                var m = $(this).is(':checked');
                if (m) {
                    productIdList.push($(this).attr("gridkey-id"));
                }
            });

            if (productIdList.length > 0) {
                var link = '/admin/products/MoveProducts/' + id + "?productIdList=" + productIdList + "&oldCategoryId=" + $("#selectedCategory").val();
                console.log(link);
                window.location = link;
            }

        }
        $(document).ready(function () {

        });
    </script>
}