@model List<Product>
@using EImece.Domain.Helpers;
@using SharkDev.MVC
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using Resources;
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.Extensions;

@{
    ViewBag.Title = "Products";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var products = Model;
    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? AppConfig.GridPageSizeNumber : pageSizeNumber;
    var gridName = "productsGrid";
    var baseList = products.DownCasting<Product>();
    ProductCategory selectedCategory = (ProductCategory)ViewBag.SelectedCategory;


}

<div class="row">
    <div class="col-md-2">
        
        @Html.SharkDev().TreeView(settings =>
    {
        settings.Id = "TreeLeft";
        settings.Header.Visible = false;
        settings.Header.Expanded = true;
        settings.ClientHandlers.ContentSelect = @" function clickLeftTree(e) {
            console.log(e);
            window.location = '/admin/products/MoveProductsInTrees/' + e.id;
        }";
        settings.DataOnClient = true;
    }).GetContent(ViewBag.TreeLeft)

        <span id="treeClickContainer"></span>
    </div>
    <div class="col-md-8">
        @if (selectedCategory != null)
        {
             
        <span>
            @{
                <span>
                    @AdminResource.SelectedCategory
                </span>
                <b style="color:red;">
                    @String.Format("{0}", selectedCategory.Name)
                </b>
            }

            <a href="@Url.Action("MoveProductsInTrees", "Products",new { id=0 })">
                <span class="glyphicon glyphicon-remove-circle gridNotActiveIcon" aria-hidden="true"></span>
            </a>
            <input type="hidden" id="selectedCategory" value="@selectedCategory.Id" />
            @if (!String.IsNullOrEmpty(ViewBag.MoveProductsMessage))
            {
                <div class="alert alert-success" role="alert">
                    @ViewBag.MoveProductsMessage
                </div>
            }

        </span>

        }
        <div class="panel panel-primary">
            @Html.Partial("pGridDropDown", baseList)
            @Html.Grid(products).Named(gridName).Columns(columns =>
    {

    columns.Add(o => o.Id, true);

    columns.Add()
                  .Encoded(false)
                  .Sanitized(false)
                   .Css("gridButtons")
                  .RenderValueAs(d => Html.Partial("pGridCheckbox", new ViewDataDictionary(ViewData){
               {"ItemId",d.Id}}));

            columns.Add(c => c.Name)
                      .Titled(AdminResource.Name)
                      .Filterable(true);

             columns.Add(o => o.Position).Titled(AdminResource.Position)
               .Encoded(false).
                    Sanitized(false).
                    SetWidth(10).
                    RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

            columns.Add(o => o.IsActive)
                  .Titled(AdminResource.IsActive)
                   .Sortable(true)
                   .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                    Sanitized(false)
                   .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                     o.Id, (o.IsActive ? Constants.OkStyle : Constants.CancelStyle), o.IsActive));

           columns.Add(o => o.CreatedDate)
                .Titled(AdminResource.CreatedDate)
               .Sortable(true)
               .Css("gridDateClass")
               .RenderValueAs(o => String.Format("{0}", o.CreatedDate.Value.ToShortDateString()))
               .SortInitialDirection(GridSortDirection.Descending);

            columns.Add(o => o.UpdatedDate)
                .Titled(AdminResource.UpdatedDate)
               .Sortable(true)
               .Css("gridDateClass")
               .RenderValueAs(o => String.Format("{0}", o.UpdatedDate.Value.ToShortDateString()))
               .SortInitialDirection(GridSortDirection.Descending);

        }).SetRowCssClasses(item => item.IsActive ? string.Empty : "GridIsActive").WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)
        </div>
    </div>
    <div class="col-md-2">
        @Html.SharkDev().TreeView(settings =>
    {
        settings.Id = "TreeRight";
        settings.Header.Visible = false;
        settings.ClientHandlers.ContentSelect = @"function treeRight(e){clickRightTree(e); }";
        settings.Header.Expanded = false;
        settings.DataOnClient = true;
    }).GetContent(ViewBag.TreeRight)
    </div>
</div>
@section Scripts{
    <script>
       
        function clickRightTree(e) {
            var productIdList = [ ];
            $("input[name=checkboxGrid]").each(function () {
                var m = $(this).is(':checked');
                if (m) {
                    productIdList.push($(this).attr("gridkey-id"));
                }
            });

            if (productIdList.length > 0) {
                var link = '/admin/products/MoveProducts/' + e.id + "?productIdList=" + productIdList + "&oldCategoryId=" + $("#selectedCategory").val();
                console.log(link);
                window.location = link;
            }
          

        }
        $(document).ready(function () {

          
        });
    </script>
}