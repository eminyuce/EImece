@model EImece.Domain.Entities.Template

@{
    ViewBag.Title = "SaveOrEdit";
}

<h2>SaveOrEdit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Template</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CreatedDate)
        @Html.HiddenFor(model => model.UpdatedDate)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TemplateXml, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.TemplateXml, new { @id = "code", @style = "margin: 0px; width: 774px; height: 787px;" })
                @Html.ValidationMessageFor(model => model.TemplateXml, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


 
    <script>

        var tags = {
            "!top": ["component"],
            "!attrs": {
            },
            component: {
                children: ["group"]
            },
            group: {
                attrs: {
                    name: ['Size', 'Power', 'Other']
                },
                children: ['textbox', 'dropdown', 'checkbox']
            },
            textbox: {
                attrs:
                    {
                        name: ['Width', 'Length', 'Hight'],
                        unit: ['Inch', 'Volt', 'Pound'],
                        values: ['Countries', 'Colors', 'State'],
                        display: ['Width', 'Length', 'Hight']
                    }, children: null
            }, dropdown: {
                attrs: {
                    name: ['Width', 'Length', 'Hight'],
                    unit: ['Inch', 'Volt', 'Pound'],
                    values: ['Countries', 'Colors', 'State'],
                    display: ['Width', 'Length', 'Hight']
                }, children: null
            }, checkbox: {
                attrs: {
                    name: ['Width', 'Length', 'Hight'],
                    unit: ['Inch', 'Volt', 'Pound'],
                    values: ['Countries', 'Colors', 'State'],
                    display: ['Width', 'Length', 'Hight']
                }, children: null
            }

        };
 
        function completeAfter(cm, pred) {
            var cur = cm.getCursor();
            if (!pred || pred()) setTimeout(function () {
                if (!cm.state.completionActive)
                    cm.showHint({ completeSingle: false });
            }, 100);
            return CodeMirror.Pass;
        }

        function completeIfAfterLt(cm) {
            return completeAfter(cm, function () {
                var cur = cm.getCursor();
                return cm.getRange(CodeMirror.Pos(cur.line, cur.ch - 1), cur) == "<";
            });
        }

        function completeIfInTag(cm) {
            return completeAfter(cm, function () {
                var tok = cm.getTokenAt(cm.getCursor());
                if (tok.type == "string" && (!/['"]/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1)) return false;
                var inner = CodeMirror.innerMode(cm.getMode(), tok.state).state;
                return inner.tagName;
            });
        }

        var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
            mode: "xml",
            lineNumbers: true,
            extraKeys: {
                "'<'": completeAfter,
                "'/'": completeIfAfterLt,
                "' '": completeIfInTag,
                "'='": completeIfInTag,
                "Ctrl-Space": "autocomplete"
            },
            hintOptions: { schemaInfo: tags }
        });
    </script>

 