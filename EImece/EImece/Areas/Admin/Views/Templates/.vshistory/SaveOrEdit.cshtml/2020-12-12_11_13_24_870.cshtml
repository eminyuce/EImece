@model EImece.Domain.Entities.Template

@using Resources;

@{
    var saveButtonText = AdminResource.SaveButtonText;
    ViewBag.Title = AdminResource.Templates;
    var XmlEditorConfiguration = ViewBag.XmlEditorConfiguration;
}
@section Styles {
    <link href="~/Content/codemirror/codemirror.css" rel="stylesheet" />
    <link href="~/Content/codemirror/addon/hint/show-hint.css" rel="stylesheet" />

}
@section Scripts {
    <script src="~/Scripts/codemirror/codemirror.js"></script>
    <script src="~/Scripts/codemirror/xml/xml.js"></script>
    <script src="~/Content/codemirror/addon/hint/show-hint.js"></script>
    <script src="~/Content/codemirror/addon/hint/xml-hint.js"></script>
}
<h2>@AdminResource.Templates</h2>
<hr class="adminLine" />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "alert alert-success" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CreatedDate)
        @Html.HiddenFor(model => model.UpdatedDate)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TemplateXml, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.TemplateXml, new
                {
               @id = "code",
               @class = "form-control",
               @cols = "20",
               @rows = "10"
           })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@saveButtonText" class="btn btn-success btn-block" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink(AdminResource.BackToList, "Index")
</div>

<script>

        @Html.Raw(XmlEditorConfiguration)

        function completeAfter(cm, pred) {
            var cur = cm.getCursor();
            if (!pred || pred()) setTimeout(function () {
                if (!cm.state.completionActive)
                    cm.showHint({ completeSingle: false });
            }, 100);
            return CodeMirror.Pass;
        }

        function completeIfAfterLt(cm) {
            return completeAfter(cm, function () {
                var cur = cm.getCursor();
                return cm.getRange(CodeMirror.Pos(cur.line, cur.ch - 1), cur) == "<";
            });
        }

        function completeIfInTag(cm) {
            return completeAfter(cm, function () {
                var tok = cm.getTokenAt(cm.getCursor());
                if (tok.type == "string" && (!/['"]/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1)) return false;
                var inner = CodeMirror.innerMode(cm.getMode(), tok.state).state;
                return inner.tagName;
            });
        }

        var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
            mode: "xml",
            lineNumbers: true,
            extraKeys: {
                "'<'": completeAfter,
                "'/'": completeIfAfterLt,
                "' '": completeIfInTag,
                "'='": completeIfInTag,
                "Ctrl-Space": "autocomplete"
            },
            hintOptions: { schemaInfo: tags }
        });
</script>