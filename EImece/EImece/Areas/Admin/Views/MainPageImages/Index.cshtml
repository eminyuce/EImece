@model List<MainPageImage>
@using SharkDev.MVC
@using EImece.Domain.Helpers;
@using SharkDev.MVC
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using Resources;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Entities;

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? Settings.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "MainPageImages";
    var title = "MainPageImage";
    var gridName = "MainPageImageGrid";
    var contents = Model;
    var baseList = contents.DownCasting();

    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;
    var gridMainPageImageText = AdminResource.GridMainPageImageText;

}

<h2>Index</h2>

<div  class="row" style="padding:20px;">

    <div class="panel panel-info">
        @Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
            {"controllerName",controllerName}
                      ,{"StateTypes","State"}
           ,{"orderingButton",true}
           ,{"selectAll",true}
           ,{"deleteAll",true}
            ,{"SetStateOnOrOff",true}})
    </div>
    <div class="panel panel-primary">
        @Html.Partial("pGridDropDown", baseList)

        @Html.Grid(contents).Named(gridName).Columns(columns =>
                       {

                           columns.Add().Encoded(false).
                                   Sanitized(false).
                                   SetWidth(10).
                                   RenderValueAs(o => String.Format("<input gridkey-id='{0}'  class='gridCheckboxes'  name='checkboxGrid' type='checkbox'>", o.Id));

                           columns.Add(o => o.Id, true);

                           columns.Add()
                                  .Encoded(false)
                                  .Sanitized(false)
                                  .SetWidth(30)
                                  .RenderValueAs(d =>
                                @<b>
                                    @Html.ActionLink(gridEditText, "SaveOrEdit", controllerName, new { id = d.Id }, new { @class = "btn btn-primary btn-sm     " })
                                </b>);

                           columns.Add()
                                  .Encoded(false)
                                  .Sanitized(false)
                                  .SetWidth(30)
                                  .RenderValueAs(d =>
                                @<b>
                                    @Html.ActionLink(gridDetailText, "Details", controllerName, new { id = d.Id }, new { @class = "btn btn-default btn-sm     " })
                                </b>);


                       columns.Add()
                                    .Encoded(false)
                                    .Sanitized(false)
                                    .SetWidth(30)
                                    .RenderValueAs(d =>
                                    @<b>
                                        @Html.ActionLink(gridDeleteText, "Delete", controllerName, new { id = d.Id }, new { @class = "btn btn-danger btn-sm " })
                                    </b>);

                       columns.Add(c => c.Name)
                              .Titled("Title")
                              .Filterable(true);



                       columns.Add(o => o.Position)
                          .Encoded(false).
                               Sanitized(false).
                               SetWidth(10).
                               RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

                       columns.Add(o => o.IsActive)
                              .Titled("State")
                              .Sortable(true)
                              .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                               Sanitized(false)
                              .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                                o.Id, (o.IsActive ? Settings.OkStyle : Settings.CancelStyle), o.IsActive));

                 
                       columns.Add(o => o.CreatedDate)
                              .Titled("Date")
                              .Sortable(true)
                              .Css("gridDateClass")
                              .RenderValueAs(o => o.CreatedDate != null ? String.Format("{0}", o.CreatedDate.Value.ToShortDateString()) : null)
                              .SortInitialDirection(GridSortDirection.Descending);



                       columns.Add()
                              .Titled("Images")
                              .Encoded(false)
                              .Sanitized(false)

                              .SetWidth(30)
                              .RenderValueAs(d =>
                            @<b>
                                <a class="btn btn-info btn-sm" data-file-id="@d.Id">@gridMainPageImageText</a>
                            </b>);


                       }).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)

    </div>







    </div>
 