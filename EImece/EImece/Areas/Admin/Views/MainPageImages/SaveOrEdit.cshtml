@model EImece.Domain.Entities.MainPageImage
@using EImece.Domain.Entities;
@using SharkDev.MVC;
@using EImece.Domain.Models.Enums;
@using SharkDev.Web.Controls.TreeView.Model;
@using Resources;
@{
    ViewBag.Title = "SaveOrEdit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var saveButtonText = AdminResource.SaveButtonText;
    var ExistingMainImageText = AdminResource.ExistingMainImageText;
}



<h2>SaveOrEdit</h2>

<div class="row" style="padding:20px;">


    @using (Html.BeginForm("SaveOrEdit", "MainPageImages", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>MainPageImage</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Lang)
            @Html.HiddenFor(model => model.EntityHash)
            @Html.HiddenFor(model => model.UpdatedDate)
            @Html.HiddenFor(model => model.CreatedDate)
            @Html.HiddenFor(model => model.ImageState)




            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, new { @data_ckeditor_field = "productCategory", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.MainImageId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
   
                    @Html.ValidationMessageFor(model => model.MainImageId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MainImageId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    <input type="file" name="mainPageImageFile" />
                    @Html.ValidationMessageFor(model => model.MainImageId, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-5">
                    @if (Model.MainImageId.HasValue)
                    {
                        <b>@ExistingMainImageText :</b>
                            @Html.Partial("pGridImageMainPage", (BaseContent)Model);
                    }
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.ImageHeight, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.HiddenFor(model => model.ImageHeight)
                    <div id="sliderHeight">
                        <div id="sliderHeightHandle" class="ui-slider-handle myslider"></div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ImageWidth, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.HiddenFor(model => model.ImageWidth)
                    <div id="sliderWidth">
                        <div id="sliderWidthHandle" class="ui-slider-handle myslider"></div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Link, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Link, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Link, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="@saveButtonText" class="btn btn-default" />
                </div>
            </div>
        </div>
    }


</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")



    <script>
        var $form = null;

        $(function () {


            var handle1 = $("#sliderWidthHandle");
            $("#sliderWidth").slider({
                min: 0,
                max: 2000,
                value: parseInt($('#ImageWidth').val()),
                create: function () {
                    handle1.text($(this).slider("value"));
                },
                slide: function (event, ui) {
                    handle1.text(ui.value);
                    $('#ImageWidth').val(ui.value);
                },
                change: function (event, ui) {
                    $('#ImageWidth').val(ui.value);
                }
            });

            var handle2 = $("#sliderHeightHandle");
            $("#sliderHeight").slider({
                min: 0,
                max: 2000,
                value: parseInt($('#ImageHeight').val()),
                create: function () {
                    handle2.text($(this).slider("value"));
                },
                slide: function (event, ui) {
                    handle2.text(ui.value);
                    $('#ImageHeight').val(ui.value);
                },
                change: function (event, ui) {
                    $('#ImageHeight').val(ui.value);
                }
            });

        
        
        });
    </script>


}
