@model List<Menu>
@using SharkDev.MVC;
@using EImece.Domain.Helpers;
@using SharkDev.MVC
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using EImece.Domain.Entities;
@using Resources;
@using EImece.Domain.Helpers.Extensions;
@using SharkDev.Web.Controls.TreeView.Model;
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? Settings.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Menus";
    var title = "Menues";
    var gridName = "MenusGrid";
    List<Menu> contents = Model;
    var baseList = contents.DownCasting<Menu>();
    var treeNodeList = (List<Node>)ViewBag.Tree;
    var menuTreeNodeList = (List<Menu>)ViewBag.MenuLeaves;
    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;
    var gridMainPageImageText = AdminResource.GridMainPageImageText;

}

<h2>Menu</h2>

<div ng-controller="MenusTreeController" class="row" style="padding:20px;">

    <div class="col-md-3">

        @Html.SharkDev().TreeView(settings =>
   {
       settings.Id = "treeViewContainer";
       settings.Header.Expanded = true;
       settings.ClientHandlers.ContentSelect = "function (e) { console.log(e); }";
       //settings.AutoCompleteHandler = Url.Content("~/Home/GetBySample");
       settings.Height = 300;
       settings.Width = 270;
       settings.DataOnClient = true;
   }).GetContent(treeNodeList)

        <span id="treeClickContainer"></span>


    </div>
    <div class="col-md-9">
        @Html.ActionLink("Export To Excel", "ExportExcel", new { @id = 0 }, new { @class = "btn btn-link" })


        @Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
            {"controllerName",controllerName}
            ,{"StateTypes","State,ImageState"}
           ,{"orderingButton",true}
           ,{"selectAll",true}
           ,{"deleteAll",true}
            ,{"SetStateOnOrOff",true}})



        <div class="panel panel-primary">
            @Html.Partial("pGridDropDown", baseList)
            @Html.Grid(contents).Named(gridName).Columns(columns =>
                       {

                           columns.Add().Encoded(false).
                                   Sanitized(false).
                                   SetWidth(10).
                                   RenderValueAs(o => String.Format("<input gridkey-id='{0}'  class='gridCheckboxes'  name='checkboxGrid' type='checkbox'>", o.Id));

                           columns.Add(o => o.Id, true);

                           columns.Add()
                                  .Encoded(false)
                                  .Sanitized(false)
                                  .SetWidth(30)
                                  .RenderValueAs(d =>
                                @<b>
                                    @Html.ActionLink(gridEditText, "SaveOrEdit", controllerName, new { id = d.Id }, new { @class = "btn btn-primary btn-sm     " })
                                </b>);

                       columns.Add()
                                      .Encoded(false)
                                      .Sanitized(false)
                                      .SetWidth(30)
                                      .RenderValueAs(d =>
                                    @<b>
                                        @Html.ActionLink(gridImagesText, "Media", controllerName, new { Id = d.Id }, new { @class = "btn btn-default  btn-sm" })
                                    </b>);

                       if (UserRoleHelper.IsDeletedEnableRoles())
                       {
                           columns.Add()
                                                               .Encoded(false)
                                                               .Sanitized(false)
                                                               .SetWidth(30)
                                                               .RenderValueAs(d =>

                                                            @<b>


                                                                @if (menuTreeNodeList.Any(r => r.Id == d.Id))
                                                                {
                                                                    @Html.ActionLink(gridDeleteText, "Delete", controllerName, new { id = d.Id }, new { @class = "btn btn-danger btn-sm " })
                                                                }
                                                                else
                                                                {
                                                                    @String.Format("No Delete")
                                                                }

                                                            </b>);
                       }



                       columns.Add(c => c.Name)
                                       .Titled("Name")
                                       .Filterable(true)
                                        .Encoded(false)
                                         .Sanitized(false)
                                   .RenderValueAs(d =>
                                @<b>
                                    @{

                                        var p = d.MenuLink.Split("_".ToCharArray());
                                        var parts = p.First().Split("-".ToCharArray());
                                        var action = parts[1];
                                        var controller = parts[0];
                                        String mid = "";
                                        mid = p.Last();

                                        if (controller.Equals("pages", StringComparison.InvariantCultureIgnoreCase))
                                        {
                                            @Html.ActionLink(d.Name, "Detail", controller, new { area = "", id = d.GetSeoUrl() }, new { @class = "btn btn-link", @target = "_blank" })
                                        }
                                        else if (controller.Equals("stories", StringComparison.InvariantCultureIgnoreCase)
                                            && action.Equals("category", StringComparison.InvariantCultureIgnoreCase))
                                        {
                                            @Html.ActionLink(d.Name, action, controller, new { area = "",  id = mid  }, new { @class = "btn btn-link", @target = "_blank" })
                                        }
                                        else
                                        {
                                            @Html.ActionLink(d.Name, action, controller, new { area = "" }, new { @class = "btn btn-link", @target = "_blank" })
                                        }

                                    }

                                </b>);


                           columns.Add(o => o.Position)
                              .Encoded(false).
                                   Sanitized(false).
                                   SetWidth(10).
                                   RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

                           columns.Add(o => o.IsActive)
                                  .Titled("State")
                                  .Sortable(true)
                                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                                   Sanitized(false)
                                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                                    o.Id, (o.IsActive ? Settings.OkStyle : Settings.CancelStyle), o.IsActive));

                           columns.Add(o => o.ImageState)
                                  .Titled("ImageState")
                                  .Sortable(true)
                                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                                   Sanitized(false)
                                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}'  {1}  name='spanImageState'></span>",
                                                                    o.Id, (o.ImageState ? Settings.OkStyle : Settings.CancelStyle), o.ImageState));




                           columns.Add(o => o.CreatedDate)
                                  .Titled("Date")
                                  .Sortable(true)
                                  .Css("gridDateClass")
                                  .RenderValueAs(o => o.CreatedDate != null ? String.Format("{0}", o.CreatedDate.Value.ToShortDateString()) : null)
                                  .SortInitialDirection(GridSortDirection.Descending);

                           columns.Add()
                       .Titled("Images")
                       .Encoded(false)
                       .Sanitized(false)

                       .SetWidth(30)
                       .RenderValueAs(d => Html.Partial("pGridImageMainPage", d));



                       }).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)

        </div>



    </div>


</div>