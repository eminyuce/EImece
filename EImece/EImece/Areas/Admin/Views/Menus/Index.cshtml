@model List<Menu>
@using SharkDev.MVC;
@using EImece.Domain.Helpers;
@using SharkDev.MVC
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using EImece.Domain.Entities;
@using Resources;
@using EImece.Domain.Helpers.Extensions;
@using SharkDev.Web.Controls.TreeView.Model;
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? AppConfig.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Menus";
    var title = "Menues";
    var gridName = "MenusGrid";
    List<Menu> contents = Model;
    var baseList = contents.DownCasting<Menu>();
    var treeNodeList = (List<Node>)ViewBag.Tree;

    var menuTreeNodeList = (List<Menu>)ViewBag.MenuLeaves;
    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;
    var gridMainPageImageText = AdminResource.GridMainPageImageText;

}

<h2>@AdminResource.Menu</h2>
<hr class="adminLine" />
<div  class="row" style="padding:20px;">

    <div class="col-md-2">

        @Html.SharkDev().TreeView(settings =>
   {
       settings.Id = "treeViewContainer";
       settings.Header.Expanded = true;
       settings.ClientHandlers.ContentSelect = @"function (e)
{
console.log(e);
window.location='/admin/menus/saveoredit/'+e.id;
}";
       //settings.AutoCompleteHandler = Url.Content("~/Home/GetBySample");
       settings.Height = 300;
       settings.Width = 270;
       settings.DataOnClient = true;
   }).GetContent(treeNodeList)

        <span id="treeClickContainer"></span>
    </div>
    <div class="col-md-10">

        @Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
            {"controllerName",controllerName}
            ,{"StateTypes","State,ImageState"}
           ,{"orderingButton",true}
           ,{"selectAll",true}
           ,{"deleteAll",true}
            ,{"SetStateOnOrOff",true},{"IsExcelButtonEnabled",true}})

        <div class="panel panel-primary">
            @Html.Partial("pGridDropDown", baseList)
            @Html.Grid(contents).Named(gridName).Columns(columns =>
       {

           columns.Add(o => o.Id, true);

           columns.Add()
                          .Encoded(false)
                          .Sanitized(false)
                           .Css("gridButtons")
                          .RenderValueAs(d => Html.Partial("pGridCheckbox", new ViewDataDictionary(ViewData){
            {"ItemId",d.Id}}));

           columns.Add()
               .Encoded(false)
               .Sanitized(false)
              .SetWidth("18%")
             .RenderValueAs(d => GridToolsColumn(d, menuTreeNodeList, controllerName));

           columns.Add(c => c.Name)
                            .Titled(AdminResource.Name)
                           .Filterable(true)
                            .Encoded(false)
                             .Sanitized(false)
                       .RenderValueAs(d => GridDetailLink(d, controllerName) );

            columns.Add(o => o.Position).Titled(AdminResource.Position)
              .Encoded(false).
                   Sanitized(false).
                   SetWidth(10).
                   RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

           columns.Add(o => o.IsActive)
                      .Titled(AdminResource.IsActive)
                  .Sortable(true)
                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                   Sanitized(false)
                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                    o.Id, (o.IsActive ? Constants.OkStyle : Constants.CancelStyle), o.IsActive));

           columns.Add(o => o.ImageState)
                      .Titled(AdminResource.ImageState)
                  .Sortable(true)
                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                   Sanitized(false)
                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}'  {1}  name='spanImageState'></span>",
                                                    o.Id, (o.ImageState ? Constants.OkStyle : Constants.CancelStyle), o.ImageState));

           columns.Add(o => o.UpdatedDate)
                      .Titled(AdminResource.UpdatedDate)
                  .Sortable(true)
                  .Css("gridDateClass")
                  .RenderValueAs(o => o.UpdatedDate != null ? String.Format("{0}", o.UpdatedDate.Value.ToShortDateString()) : null)
                  .SortInitialDirection(GridSortDirection.Descending);

           columns.Add()
           .Titled(AdminResource.Images)
       .Encoded(false)
       .Sanitized(false)

       .SetWidth(30)
       .RenderValueAs(d => Html.Partial("pGridImageMainPage", d));

       }).SetRowCssClasses(item => item.IsActive ? string.Empty : "GridIsActive").WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)
        </div>
    </div>
</div>
@helper GridDetailLink(Menu d, String controllerName)
{

<b>
    @{

        var p = d.MenuLink.Split("_".ToCharArray());
        var parts = p.First().Split("-".ToCharArray());
        var action = parts[1];
        var controller = parts[0];
        String mid = "";
        mid = p.Last();
        if (d.LinkIsActive && !String.IsNullOrEmpty(d.Link))
        {
            <a class="btn btn-link" target = "_blank" href="@d.Link">@d.Name</a>
        }
        else  if (controller.Equals("pages", StringComparison.InvariantCultureIgnoreCase))
        {
            @Html.ActionLink(d.Name, "Detail", controller, new { area = "", id = d.GetSeoUrl() }, new { @class = "btn btn-link", @target = "_blank" })
        }
        else if (controller.Equals("stories", StringComparison.InvariantCultureIgnoreCase)
            && action.Equals("categories", StringComparison.InvariantCultureIgnoreCase))
        {
            @Html.ActionLink(d.Name, action, controller, new { area = "", id = mid }, new { @class = "btn btn-link", @target = "_blank" })
        }
        else
        {
            @Html.ActionLink(d.Name, action, controller, new { area = "" }, new { @class = "btn btn-link", @target = "_blank" })
        }

    }
</b>

}
@helper GridToolsColumn(Menu d, List<Menu> menuTreeNodeList, String controllerName)
{

    <div class="gridToolBox">

        <span>
            @Html.ActionLink(" ", "Media", controllerName, new { Id = d.Id }, new { @class = "gridBtn btn btn-xs  btn-default     glyphicon glyphicon-camera glyphicon-white " })
        </span>
        <span>
            @Html.ActionLink(" ", "SaveOrEdit", controllerName, new { id = d.Id }, new { @class = "gridBtn btn btn-xs btn-primary   glyphicon glyphicon-pencil glyphicon-white " })
        </span>

        @if (UserRoleHelper.IsDeletedEnableRoles())
        {

         if (menuTreeNodeList.Any(r => r.Id == d.Id))
            {
    <span>

       @Html.Partial("pDeleteModal", new ViewDataDictionary(ViewData) {
        { "ItemId", d.Id },
        {"controllerName",controllerName},
        { "DeleteIcon", "gridBtn btn-xs btn btn-danger glyphicon  glyphicon-remove-circle" },
        { "ItemDescription", d.Name } })
    </span>
            }
            else
            {
                @String.Format("No Delete")
            }
        }
    </div>
}