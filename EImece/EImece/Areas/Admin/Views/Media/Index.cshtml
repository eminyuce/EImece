@using EImece.Domain.Entities;
@using EImece.Domain.Models.AdminModels;
@using EImece.Domain.Helpers;
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using EImece.Domain.Helpers.Extensions;
@using Resources;
@model MediaAdminIndexModel

@{
    ViewBag.Title = "Index";
    var baseContent = Model.BaseContent;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? Settings.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Media";
    var title = "Medias";
    var gridName = "MediaGrid";
    var contents = Model.FileStorages;
    var baseList = contents.DownCasting<FileStorage>();


    var gridImagesText = AdminResource.GridImagesText;
    var gridEditText = AdminResource.GridEditText;
    var gridDeleteText = AdminResource.GridDeleteText;
    var gridDetailText = AdminResource.GridDetailText;

}
<style>
    .myslider {
        width: 3em;
        height: 1.6em;
        top: 50%;
        margin-top: -.8em;
        text-align: center;
        line-height: 1.6em;
    }
</style>
@Html.Partial("_pBackButtonLink", Model)

@Html.HiddenFor(r => Model.Id)
@Html.HiddenFor(r => Model.ImageType)
@Html.HiddenFor(r => Model.MediaMod)

@Html.Partial("pSliderResizing", baseContent);

<br />
<!-- blueimp File Upload & Gallery styles -->
@Styles.Render("~/Content/jQuery-File-Upload")
<div id="target">
    Click here
</div>


<script>
    var $form = null;

    $('#fileupload').addClass('fileupload-processing');
    $(function () {
        
        $form = $('#fileupload').fileupload({
            dataType: 'json'
        });
        $('#fileupload').bind('fileuploadsubmit', function (e, data) {
            console.log($("#sliderHeight").slider("option", "value") + "  " + $("#sliderWidth").slider("option", "value"));
            data.formData = {
                contentId: $("#Id").val(),
                imageType: $("#ImageType").val(),
                mod: $("#MediaMod").val(),
                imageHeight: $("#sliderHeight").slider("option", "value"),
                imageWidth: $("#sliderWidth").slider("option", "value")
            }
        });
      
        $("#target").click(function () {

        });
    });
</script>


@Html.Partial("_Files")



<div class="panel panel-info">
    @Html.Partial("pGridOperations", new ViewDataDictionary(ViewData){
            {"controllerName",controllerName}
           ,{"StateTypes","State"}
           ,{"IsNewRecordButtonEnabled",false}
           ,{"orderingButton",true}
           ,{"selectAll",true}
           ,{"deleteAll",true}
            ,{"SetStateOnOrOff",true}})
</div>
<div class="panel panel-primary">
    @Html.Partial("pGridDropDown", baseList)
    @Html.Grid(contents).Named(gridName).Columns(columns =>
{

        columns.Add().Encoded(false).
                Sanitized(false).
                SetWidth(10).
                RenderValueAs(o => String.Format("<input gridkey-id='{0}'  class='gridCheckboxes'  name='checkboxGrid' type='checkbox'>", String.Format("{0}-{1}-{2}-{3}", o.Id, Model.Id, Model.MediaMod, Model.ImageType)));

        columns.Add(o => o.Id, true);


        columns.Add()
                             .Encoded(false)
                             .Sanitized(false)
                             .SetWidth(30)
                             .RenderValueAs(d =>
                            @<b>

                                <a href=@String.Format("/media/images/{0}",d.FileName)
                                   title="@d.FileName"
                                   download="@d.FileName"
                                   data-gallery="">


                                    <img src=@d.GetAdminCroppedImageUrl(150,150)>
                                </a>

                    

      
                            </b>);

    columns.Add(c => c.Name)
           .Titled("Title")
           .Filterable(true);



    columns.Add(o => o.Position)
       .Encoded(false).
            Sanitized(false).
            SetWidth(10).
            RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

    columns.Add(o => o.IsActive)
           .Titled("State")
           .Sortable(true)
           .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
            Sanitized(false)
           .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                             o.Id, (o.IsActive ? Settings.OkStyle : Settings.CancelStyle), o.IsActive));




    columns.Add(o => o.CreatedDate)
           .Titled("Date")
           .Sortable(true)
           .Css("gridDateClass")
           .RenderValueAs(o => o.CreatedDate != null ? String.Format("{0}", o.CreatedDate.Value.ToShortDateString()) : null)
           .SortInitialDirection(GridSortDirection.Descending);





}).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)

</div>



@Scripts.Render("~/bundles/jQuery-File-Upload")