@using EImece.Domain.Entities;
@using EImece.Domain.Models.AdminModels;
@using EImece.Domain.Helpers;
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@model MediaAdminIndexModel

@{
    ViewBag.Title = "Index";
    var baseContent = Model.BaseContent;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? Settings.GridPageSizeNumber : pageSizeNumber;
    var controllerName = "Media";
    var title = "Medias";
    var gridName = "MediaGrid";
    var contents = Model.FileStorages;
}

<h2>@baseContent.Name </h2>
@Html.HiddenFor(r => Model.Id)
@Html.HiddenFor(r => Model.ImageType)
@Html.HiddenFor(r => Model.MediaMod)


<!-- blueimp File Upload & Gallery styles -->
@Styles.Render("~/Content/jQuery-File-Upload")
@*<script>

        $(function () {
            $('#fileUpload').fileupload({
                dataType: 'json',
                done: function (e, data) {
                    $.each(data.result.files, function (index, file) {
                        $('<p/>').text(file.name).appendTo(document.body);
                    });
                }
            });
        });
    </script>*@
<script>
    var $form = null;


    $(function () {

        $form = $('#fileupload').fileupload({
            dataType: 'json',
            formData: {
                contentId: $("#Id").val(),
                imageType: $("#ImageType").val(),
                mod: $("#MediaMod").val()
            }
        });

    });
    $('#fileupload').addClass('fileupload-processing');

</script>
@Html.Partial("_Files")




<div class="panel panel-info">
    <div class="panel-body">

        <div class="row">

            <span class="col-md-9">
                @Html.Partial("pSearchForm")
            </span>
        </div>
        <div class="row">
            <span class="col-md-1">
                <span class="btn btn-xs btn-default " id="SelectAll">
                    Select All
                </span>
            </span>
            <span class="col-md-1">
                <span class="btn btn-xs btn-default" id="DeselectAll">
                    Deselect All
                </span>
            </span>
            <span class="col-md-2">
                <span class="btn btn-xs btn-default" id="DeleteAll">
                    Delete Selected
                </span>
            </span>

            <span class="col-md-2">
                <select name="ItemStateSelection" id="ItemStateSelection">
                    <option value="State">Durum</option>
                    <option value="ImageState">Resim Yayında</option>
                    <option value="MainPage">Ana Sayfa</option>
                </select>
            </span><span class="col-md-2">
                <span class="btn btn-xs btn-default" id="SetStateOnAll">Set Selected State True All</span>
            </span><span class="col-md-2">
                <span class="btn btn-xs btn-default" id="SetStateOffAll">Set Selected State False All</span>
            </span>
            <span class="col-md-2">
                <span class="btn btn-xs btn-default" id="OrderingAll">
                    Ordering All
                </span>
            </span>
        </div>
        <div id="ErrorMessagePanel" style="display: none;" class="alert alert-danger">
            <span id="ErrorMessage"></span>
        </div>

    </div>
</div>
<div class="panel panel-primary">
    <div class="panel-heading">
        <div class="row">
            <span class="col-md-6">
                <span class="label ">
                    <span class="badge text-danger text-large">@contents.Count() </span>

                    Records exists
                </span>
            </span>
            <span class="col-md-3">
                <p class="text-right">Grid Paging Number</p>
            </span>
            <span class="col-md-3">
                <select name="GridListItemSize" class="form-control dropdown-toggle" id="GridListItemSize">
                    <option class="text-info" value="25">25</option>
                    <option selected="selected" class="text-info" value="50">50</option>
                    <option class="text-info" value="100">100</option>
                    <option class="text-info" value="250">250</option>
                    <option class="text-info" value="500">500</option>
                    <option class="text-info" value="1000">1000</option>
                </select>
            </span>
        </div>

    </div>
    @Html.Grid(contents).Named(gridName).Columns(columns =>
{

columns.Add().Encoded(false).
        Sanitized(false).
        SetWidth(10).
        RenderValueAs(o => String.Format("<input gridkey-id='{0}'  class='gridCheckboxes'  name='checkboxGrid' type='checkbox'>", String.Format("{0}-{1}-{2}-{3}", o.Id, Model.Id, Model.MediaMod, Model.ImageType)));

columns.Add(o => o.Id, true);


columns.Add()
       .Encoded(false)
       .Sanitized(false)
       .SetWidth(30)
       .RenderValueAs(d =>
    @<b>
        @Html.ActionLink(" ", "Details", controllerName, new { id = d.Id }, new { @class = "btn btn-default btn-sm     glyphicon glyphicon-eye-open" })
    </b>);
columns.Add()
             .Encoded(false)
             .Sanitized(false)
             .SetWidth(30)
             .RenderValueAs(d =>
            @<b>
                @Html.ActionLink(" ", "Delete", controllerName, new { id = d.Id }, new { @class = "btn btn-danger btn-sm glyphicon glyphicon-trash glyphicon-white" })
            </b>);
columns.Add()
                             .Encoded(false)
                             .Sanitized(false)
                             .SetWidth(30)
                             .RenderValueAs(d =>
                            @<b>

                                <a href=@String.Format("/media/images/{0}",d.FileName)
                                   title="@d.FileName"
                                   download="@d.FileName"
                                   data-gallery="">


                                    <img src=@String.Format("/media/images/thumbs/thb{0}",d.FileName)>
                                </a>




                            </b>);

    columns.Add(c => c.Name)
           .Titled("Title")
           .Filterable(true);



    columns.Add(o => o.Position)
       .Encoded(false).
            Sanitized(false).
            SetWidth(10).
            RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

    columns.Add(o => o.IsActive)
           .Titled("State")
           .Sortable(true)
           .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
            Sanitized(false)
           .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                             o.Id, (o.IsActive ? Settings.OkStyle : Settings.CancelStyle), o.IsActive));




    columns.Add(o => o.CreatedDate)
           .Titled("Date")
           .Sortable(true)
           .Css("gridDateClass")
           .RenderValueAs(o => o.CreatedDate != null ? String.Format("{0}", o.CreatedDate.Value.ToShortDateString()) : null)
           .SortInitialDirection(GridSortDirection.Descending);





}).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)

</div>



@Scripts.Render("~/bundles/jQuery-File-Upload")