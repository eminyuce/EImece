@model IEnumerable<EImece.Domain.Entities.Tag>
@using EImece.Domain.Helpers;
@using SharkDev.MVC
@using GridMvc.Html
@using GridMvc.Sorting
@using EImece.Domain;
@using EImece.Domain.Models.Enums;

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? 10 : pageSizeNumber;
    var controllerName = "Tags";
    var title = "Tags";
    var gridName = "TagGrid";
    var contents = Model;

}

<h2>Index</h2>


<div class="panel panel-info">
    <div class="panel-body">

        <div class="row">
            <span class="col-md-3">
                <p>
                    @Html.ActionLink("Create", "SaveOrEdit", null, new { @class = "btn btn-primary btn-block glyphicon glyphicon-plus" })
                </p>
            </span>
            <span class="col-md-9">
                @Html.Partial("pSearchForm")
            </span>
        </div>
        <div class="row">
            <span class="col-md-1">
                <span class="btn btn-xs btn-default " id="SelectAll">
                    Select All
                </span>
            </span>
            <span class="col-md-1">
                <span class="btn btn-xs btn-default" id="DeselectAll">
                    Deselect All
                </span>
            </span>
            <span class="col-md-2">
                <span class="btn btn-xs btn-default" id="DeleteAll">
                    Delete Selected
                </span>
            </span>

            <span class="col-md-2">
                <input type="hidden" value="State" id="ItemStateSelection" />
            </span><span class="col-md-2">
                <span class="btn btn-xs btn-default" id="SetStateOnAll">Set Selected State True All</span>
            </span><span class="col-md-2">
                <span class="btn btn-xs btn-default" id="SetStateOffAll">Set Selected State False All</span>
            </span>
            <span class="col-md-2">
                <span class="btn btn-xs btn-default" id="OrderingAll">
                    Ordering All
                </span>
            </span>
        </div>
        <div id="ErrorMessagePanel" style="display: none;" class="alert alert-danger">
            <span id="ErrorMessage"></span>
        </div>

    </div>
</div>
<div class="panel panel-primary">
    <div class="panel-heading">
        <div class="row">
            <span class="col-md-6">
                <span class="label ">
                    <span class="badge text-danger text-large">@contents.Count() </span>

                    Records exists
                </span>
            </span>
            <span class="col-md-3">
                <p class="text-right">Grid Paging Number</p>
            </span>
            <span class="col-md-3">
                <select name="GridListItemSize" class="form-control dropdown-toggle" id="GridListItemSize">
                    <option class="text-info" value="25">25</option>
                    <option selected="selected" class="text-info" value="50">50</option>
                    <option class="text-info" value="100">100</option>
                    <option class="text-info" value="250">250</option>
                    <option class="text-info" value="500">500</option>
                    <option class="text-info" value="1000">1000</option>
                </select>
            </span>
        </div>

    </div>
    @Html.Grid(contents).Named(gridName).Columns(columns =>
                       {

                           columns.Add().Encoded(false).
                                   Sanitized(false).
                                   SetWidth(10).
                                   RenderValueAs(o => String.Format("<input gridkey-id='{0}'  class='gridCheckboxes'  name='checkboxGrid' type='checkbox'>", o.Id));

                           columns.Add(o => o.Id, true);

                           columns.Add()
                                  .Encoded(false)
                                  .Sanitized(false)
                                  .SetWidth(30)
                                  .RenderValueAs(d =>
                                @<b>
                                    @Html.ActionLink(" ", "SaveOrEdit", controllerName, new { id = d.Id }, new { @class = "btn btn-primary btn-sm     glyphicon glyphicon-pencil glyphicon-white" })
                                </b>);

                           columns.Add()
                                  .Encoded(false)
                                  .Sanitized(false)
                                  .SetWidth(30)
                                  .RenderValueAs(d =>
                                @<b>
                                    @Html.ActionLink(" ", "Details", controllerName, new { id = d.Id }, new { @class = "btn btn-default btn-sm     glyphicon glyphicon-eye-open" })
                                </b>);
                       columns.Add()
                                    .Encoded(false)
                                    .Sanitized(false)
                                    .SetWidth(30)
                                    .RenderValueAs(d =>
                                    @<b>
                                        @Html.ActionLink(" ", "Delete", controllerName, new { id = d.Id }, new { @class = "btn btn-danger btn-sm glyphicon glyphicon-trash glyphicon-white" })
                                    </b>);

                           columns.Add(c => c.Name)
                                  .Titled("Tag Name")
                                  .Filterable(true);

                           columns.Add(c => c.TagCategory.Name)
                         .Titled("TagCategoryName")
                         .Filterable(true)
                         .Encoded(false)
                         .RenderValueAs(d =>
                        @<span>
                           @String.Format("{0}",d.Name)
                        </span>);

                       columns.Add(c => c.TagCategory.TagType)
                .Titled("TagType")
                .Sanitized(false)
                .Encoded(false)
                .Filterable(true).RenderValueAs(d =>
                @<span>
                    @String.Format("{0}", (EImeceTagType)d.TagCategory.TagType)
                </span>);




                           columns.Add(o => o.Position)
                          .Encoded(false).
                               Sanitized(false).
                               SetWidth(10).
                               RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Position));

                           columns.Add(o => o.IsActive)
                                  .Titled("State")
                                  .Sortable(true)
                                  .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                                   Sanitized(false)
                                  .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                                    o.Id, (o.IsActive ? Settings.OkStyle : Settings.CancelStyle), o.IsActive));

                           columns.Add(o => o.CreatedDate)
                                  .Titled("Date")
                                  .Sortable(true)
                                  .Css("gridDateClass")
                                  .RenderValueAs(o => o.CreatedDate != null ? String.Format("{0}", o.CreatedDate.Value.ToShortDateString()) : null)
                                  .SortInitialDirection(GridSortDirection.Descending);





                       }).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)

</div>


