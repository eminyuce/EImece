@using EImece.Domain.Helpers;
@using GridMvc.Html;
@using GridMvc.Sorting;
@using EImece.Domain;
@using EImece.Domain.Entities;
@using Resources;
@using Newtonsoft.Json;
@using EImece.Domain.Models.FrontModels;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Models.Enums;
@using System.Resources;
@model CustomerOrderDetailViewModel

@{
    Layout = "~/Areas/Customers/Views/Shared/_Layout.cshtml";
    var controllerName = "Home";
    var order = Model.Order;
    var os = (EImeceOrderStatus)order.OrderStatus;
    var rm = new ResourceManager(typeof(Resource));
    var orderStatusText = rm.GetString(os.GetType().Name + "_" + os);
}

<!-- Page Content-->
<div class="container pt-lg-3 pb-5 mb-sm-3">
    <!-- Toast notifications-->
    <div class="toast-container toast-bottom-center">
        <div class="toast mb-3" id="profile-toast" data-delay="5000" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-success text-white">
                <i class="mr-2" data-feather="check-circle" style="width: 1.25rem; height: 1.25rem;"></i><span class="font-weight-semibold mr-auto">Updatedblogs!</span>
                <button class="close text-white ml/Si-2 mb-1" type="button" data-dismiss="toast" aria-label="Close"><span aria-hidden="true">×</span></button>
            </div>
            <div class="toast-body">@Resource.YourProfileUpdatedSuccessfully</div>
        </div>
    </div>
    <div class="row pt-1">
        <!-- Main content-->
        <div class="col-lg-12">
            @Html.Partial("_CustomerDetails", (Customer)Model.Customer)

            <!-- Order Details-->
            <div class="card mb-4">
                <div class="card-header">
                    <h4 class="card-title">@string.Format("{0} - {1} - {2}", Resource.OrderSummary, order.OrderNumber, orderStatusText)</h4>
                </div>
                <div class="card-body pb-0">
                    <div class="text-center">
                        <b>@Resource.DatePurchased - @order.CreatedDate.ToString("dddd, dd MMMM yyyy HH:mm:ss")</b>
                    </div>
                    @if (order.ShippingAddress != null)
                    {
                        <div class="d-sm-flex justify-content-between mb-4 pb-4 border-bottom">
                            <div class="pt-2 pt-sm-3 pl-sm-3 mx-auto mx-sm-0 text-center">
                                <div class="alert alert-primary">@Resource.ShippingAddress <br /> @order.ShippingAddress.AddressInfo</div>
                            </div>
                        </div>
                    }
                    @foreach (var orderProduct in order.OrderProducts)
                    {
                        var ProductSpecItems = JsonConvert.DeserializeObject<List<ProductSpecItem>>(orderProduct.ProductSpecItems.ToStr());
                        var product = orderProduct.Product;
                        var imgTag = product.GetCroppedImageUrl(product.MainImageId, 160, 0);
                        <!-- Item-->
                        <div class="d-sm-flex justify-content-between mb-4 pb-4 border-bottom">
                            <div class="media d-block d-sm-flex text-center text-sm-left">
                                <a class="cart-item-thumb mx-auto mr-sm-4" target="_blank" href="@product.DetailPageAbsoluteUrl"><img src="@imgTag" alt="Product"></a>
                                <div class="media-body pt-3">
                                    <h3 class="product-card-title font-weight-semibold border-0 pb-0"><a target="_blank" href="@product.DetailPageAbsoluteUrl">@product.Name</a></h3>
                                    <div class="font-size-sm"><span class="text-muted mr-2">@Resource.UnitPrice:</span>@orderProduct.Price.CurrencySign()</div>
                                    <div class="font-size-sm"><span class="text-muted mr-2">@Resource.ProductCategory:</span>@product.ProductCategory.Name</div>
                                    @if (ProductSpecItems.IsNotEmpty())
                                    {
                                        foreach (var psi in ProductSpecItems)
                                        {
                                            <div class="font-size-sm"><span class="text-muted mr-2">@psi.SpecsName:</span>@psi.SpecsValue</div>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="pt-2 pt-sm-3 pl-sm-3 mx-auto mx-sm-0 text-center">
                                <div class="text-muted mb-sm-2">@Resource.Quantity</div>
                                <div class="font-weight-semibold">@orderProduct.Quantity</div>
                            </div>
                            <div class="pt-2 pt-sm-3 pl-sm-3 mx-auto mx-sm-0 text-center">
                                <div class="text-muted mb-sm-2">@Resource.Subtotal:</div>
                                <div class="font-weight-semibold">@orderProduct.TotalPrice.CurrencySign()</div>
                            </div>
                        </div>
                    }
                    <!-- Summary-->
                    <div class="d-sm-flex justify-content-between mb-4 pb-4 border-bottom">
                        <div class="media d-block d-sm-flex text-center text-sm-left">
                            <div class="media-body pt-3">
                            </div>
                        </div>
                        <div class="pt-2 pt-sm-3 pl-sm-3 mx-auto mx-sm-0 text-center">
                            <div class="font-weight-semibold">@order.OrderProducts.Sum(r => r.Quantity) @Resource.PieceOfProductPurchased</div>
                        </div>
                        <div class="pt-2 pt-sm-3 pl-sm-3 mx-auto mx-sm-0 text-center">
                            <div class="font-weight-semibold">@Resource.Total: @order.OrderProducts.Sum(r => r.Price).CurrencySign()</div>
                        </div>
                    </div>

                    <!-- Additional Order Information (Eksik Veriler Buraya Eklendi)-->
                    <div class="mb-4 pb-4 border-bottom">
                        <ul class="list-unstyled">
                            <li>
                                <strong>@Resource.ShipmentTrackingNumber:</strong>
                                @if (!string.IsNullOrEmpty(order.ShipmentTrackingNumber))
                                {
                                    <a href="@string.Format("{0}/{1}", Constants.ShipmentTrackingCompanyLink, HttpUtility.HtmlEncode(order.ShipmentTrackingNumber.ToStr()))" target="_blank">
                                        @order.ShipmentTrackingNumber
                                    </a>
                                }
                                else
                                {
                                    @Resource.NoShipmentDoneYetForYourOrder
                                }
                            </li>
                            @if (!string.IsNullOrEmpty(order.ShipmentCompanyName))
                            {
                                <li><strong>@Resource.ShipmentCompany:</strong> @order.ShipmentCompanyName</li>
                            }
                            @if (!string.IsNullOrEmpty(order.AdminOrderNote))
                            {
                                <li><strong>@Resource.AdminOrderNote:</strong> @order.AdminOrderNote</li>
                            }
                            @if (!string.IsNullOrEmpty(order.OrderComments))
                            {
                                <li><strong>@Resource.OrderComments:</strong> @order.OrderComments</li>
                            }
                        </ul>
                    </div>

                </div>
                <!-- Footer-->
                <div class="card-footer flex-wrap justify-content-between bg-secondary">
                    <div class="px-2 py-1"><span class="text-muted"> </span><span class="font-weight-semibold"></span></div>
                    <div class="px-2 py-1"><span class="text-muted">@Resource.CargoPrice: </span><span class="text-lg font-weight-semibold">@order.CargoPrice.CurrencySign()</span></div>
                    @if (!String.IsNullOrEmpty(order.Coupon))
                    {
                        <div class="px-2 py-1"><span class="text-muted"> @Resource.Coupon (@order.Coupon): </span><span class="text-lg font-weight-semibold">@order.CouponDiscount TL</span></div>
                    }
                    <div class="px-2 py-1"><span class="text-muted">@Resource.TotalPriceOfYourOrderWithCargoPrice: </span><span class="text-lg font-weight-semibold">@order.PaidPriceDecimal.CurrencySign()</span></div>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            @Html.ActionLink(Resource.BackToList,
                     "customerorders", "Home", null,
                     new { @class = "btn btn-pill btn-outline-info", area = "customers" })
        </div>
    </div>
</div>

@helper createOrderStatus(Order o)
{
    var os = (EImeceOrderStatus)o.OrderStatus;
    var rm = new ResourceManager(typeof(Resource));
    var resourceDisplayName = rm.GetString(os.GetType().Name + "_" + os);
    var orderStatusText = EImece.Domain.Helpers.EnumHelper.GetEnumDescription(os);
    switch (os)
    {
        case EImeceOrderStatus.NewlyOrder:
            <span class="badge badge-secondary m-0">@resourceDisplayName</span>
            break;
        case EImeceOrderStatus.PaymentPending:
            <span class="badge badge-primary m-0">@resourceDisplayName</span>
            break;
        case EImeceOrderStatus.InProgress:
            <span class="badge badge-warning m-0">@resourceDisplayName</span>
            break;
        case EImeceOrderStatus.Shipped:
            <span class="badge badge-dark m-0">@resourceDisplayName</span>
            break;
        case EImeceOrderStatus.Delivered:
            <span class="badge badge-success m-0">@resourceDisplayName</span>
            break;
        case EImeceOrderStatus.Cancelled:
            <span class="badge badge-danger m-0">@resourceDisplayName</span>
            break;
        case EImeceOrderStatus.Returned:
            <span class="badge badge-info m-0">@resourceDisplayName</span>
            break;
        case EImeceOrderStatus.Refunded:
            <span class="badge badge-light m-0">@resourceDisplayName</span>
            break;
        default:
            <span class="badge badge-secondary m-0">Bilinmeyen Durum</span>
            break;
    }
}