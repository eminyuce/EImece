@model EImece.Domain.Models.FrontModels.BuyWithNoAccountCreation
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Helpers;
@using EImece.Domain;
@using Resources;
@using EImece.Domain.Entities
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Helpers;
@using EImece.Domain.Models.FrontModels;
@using Resources;
@using EImece.Domain;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Models.Enums;
@using System.Collections.Immutable;
@using System.Text.RegularExpressions;

@{
    var customer = Model.Customer;
    Layout = "~/Views/Shared/_Layout.cshtml";
    BuyWithNoAccountCreation BuyWithNoAccountCreation = Model;
    List<ShoppingCartItem> products = BuyWithNoAccountCreation.ShoppingCartItems;
}

<br />
<br />
<br />

<div class="container pb-5 mb-sm-4 mt-n2 mt-md-n3">
    <div class="row">

        <div class="container pb-5 mb-sm-4 mt-n2 mt-md-n3">
            <div class="row">
                <div class="col-md-12">
                    <div class="alert alert-info text-center">
                        <div>@Resource.CustomerBillingDetailsNotFilledOut</div>
                        <div>@Resource.ContinueShoppingWithoutAccount</div>
                    </div>
                </div>

                <div class="col-xl-12 col-md-12">
                    <h6 class="mb-3 pt-2 pb-3 border-bottom">@Resource.ShippingAddress</h6>
                    @using (Html.BeginForm("ShoppingWithoutAccount", "Payment", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label><i class="fas fa-user"></i> @Html.LabelFor(model => customer.Name)</label>
                                    @Html.EditorFor(model => customer.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })
                                    @Html.ValidationMessageFor(model => customer.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label><i class="fas fa-user"></i> @Html.LabelFor(model => customer.Surname)</label>
                                    @Html.EditorFor(model => customer.Surname, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })
                                    @Html.ValidationMessageFor(model => customer.Surname, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label><i class="fas fa-envelope"></i> @Html.LabelFor(model => customer.Email)</label>
                                    @Html.EditorFor(model => customer.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })
                                    @Html.ValidationMessageFor(model => customer.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label><i class="fas fa-id-card"></i> @Html.LabelFor(model => customer.IdentityNumber)</label>
                                    @Html.EditorFor(model => customer.IdentityNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })
                                    <span class="badge badge-info">@Resource.WhyNeedIdentityNumber</span>
                                    @Html.ValidationMessageFor(model => customer.IdentityNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <label><i class="fas fa-phone"></i> @Html.LabelFor(model => customer.GsmNumber)</label>
                                    @Html.EditorFor(model => customer.GsmNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })
                                    <span class="badge badge-info">@Resource.WhyNeedGsmNumber</span>
                                    @Html.ValidationMessageFor(model => customer.GsmNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label><i class="fas fa-city"></i> @Html.LabelFor(model => customer.City)</label>
                                    @Html.EditorFor(model => customer.City, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })
                                    @Html.ValidationMessageFor(model => customer.City, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label><i class="fas fa-map-marker-alt"></i> @Html.LabelFor(model => customer.Town)</label>
                                    @Html.EditorFor(model => customer.Town, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })
                                    @Html.ValidationMessageFor(model => customer.Town, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label><i class="fas fa-globe"></i> @Html.LabelFor(model => customer.Country)</label>
                                    @Html.DropDownListFor(model => customer.Country, GeneralHelper.GetStaticCountries(), new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => customer.Country, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label><i class="fas fa-map-pin"></i> @Html.LabelFor(model => customer.ZipCode)</label>
                                    @Html.EditorFor(model => customer.ZipCode, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })
                                    @Html.ValidationMessageFor(model => customer.ZipCode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <div>@Html.LabelFor(model => customer.Description, htmlAttributes: new { @class = "control-label" }) </div> 
                                    @Html.TextAreaFor(model => customer.Description, new { @class = "form-control", placeholder = "", rows = "3" })
                                    @Html.ValidationMessageFor(model => customer.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <div class="alert alert-secondary" role="alert">
                                        @Html.Raw(String.Format(Resource.CustomerOpenAddressDescription, @Resource.CustomerOpenAddress))
                                    </div>
                                </div>
                            </div>
                        </div>


                     
                        <!--
        <h6 class="mb-3 pt-4 pb-3 border-bottom">Resource.BillingAdress</h6>
        <div class="custom-control custom-checkbox">
            <input class="custom-control-input" type="checkbox" id="sameAsShipping">
            <label class="custom-control-label" for="sameAsShipping">Resource.SameAsShippingAddress</label>
        </div>
            -->
                        <div class="row mt-4">
                            <div class="col-sm-12">
                                <button type="submit" class="btn btn-info btn-block"><i class="fas fa-credit-card"></i> @Resource.GoToPayment</button>
                            </div>
                        </div>
                    }
                </div>
                    </div>
        </div>


        <!-- Content-->
        <div class="col-xl-9 col-md-8">

            <!-- Item-->
            <h2 class="h6 px-4 py-3 bg-secondary mb-4">@Resource.ReviewYourOrder</h2>
            @if (products.IsNotEmpty())
            {
                for (int i = 0; i < products.Count; i++)
                {
                    @CreateShoppingCartItem(products[i], i)
                }
            }
            <!-- Navigation-->
        </div>
        <!-- Sidebar-->
        <div class="col-xl-3 col-md-4 pt-4 mt-3 pt-md-0 mt-md-0">
            @if (Model.BasketMinTotalPriceForCargoInt > 0)
            {
                <span class="badge badge-pill badge-danger mr-2 mb-2">
                    @Model.BasketMinTotalPriceForCargoInt.CurrencySign() @Resource.CargoFreeText
                </span>
            }

            <h2 class="h6 px-4 py-3 bg-secondary text-center">@Resource.OrderSummary</h2>
            <div class="font-size-sm border-bottom pt-2 pb-3">
                <div class="d-flex justify-content-between mb-2"><span>@Resource.MyBasket:</span><span id="TotalPrice">@Model.TotalPrice.CurrencySign()</span></div>
                @if (Model.Coupon != null)
                {
                    <div class="d-flex justify-content-between mb-2"><span>@Resource.CouponCode:</span><span id="CouponName">@Model.CouponName</span></div>
                }
                <div id="CargoFreeTextInfo" class="d-flex justify-content-between mb-2">
                    @if (Model.BasketMinTotalPriceForCargoInt > 0)
                    {
                        if (Model.TotalPrice > Model.BasketMinTotalPriceForCargoInt)
                        {
                            <span class="badge badge-pill badge-danger mr-2 mb-2">
                                @Resource.CargoFreeTextInfo
                            </span>
                        }
                        else
                        {
                            <span>@Resource.CargoPrice:</span><span>@Model.CargoPriceValue.CurrencySign()</span>
                        }

                    }
                    else if (Model.CargoPriceValue > 0)
                    {
                        <span>@Resource.CargoPrice:</span><span>@Model.CargoPriceValue.CurrencySign()</span>
                    }
                    else
                    {
                        <span class="badge badge-pill badge-danger mr-2 mb-2">
                            @Resource.CargoFreeTextInfo
                        </span>
                    }
                </div>
            </div>

            <div class="h3 font-weight-semibold text-center py-3"><span>@Resource.Total:  </span><span id="TotalPriceWithCargoPrice">@Model.TotalPriceWithCargoPrice.CurrencySign()</span></div>
            
        </div>
    </div>
</div>


@helper CreateShoppingCartItem(ShoppingCartItem item, int i)
{
    var product = item.Product;
    var totalPricePerItem = product.Price * item.Quantity;

    <!-- Item-->
    <div class="d-sm-flex justify-content-between my-4 pb-4 border-bottom">
        <input type="hidden" name=@String.Format("productId[{0}]", i) value="@product.Id">
        <input type="hidden" data-shopping-item-price="@item.ShoppingCartItemId" value="@product.Price" />
        <div class="media d-block d-sm-flex text-center text-sm-left">
            @if (!String.IsNullOrEmpty(product.CroppedImageUrl))
            {
                <a class="cart-item-thumb mx-auto mr-sm-4" href="@product.DetailPageUrl">
                    <img src="@product.CroppedImageUrl" alt="Product">
                </a>
            }
            <div class="media-body pt-3">
                <h3 class="product-card-title font-weight-semibold border-0 pb-0">
                    <a href="@product.DetailPageUrl">@product.Name</a>
                </h3>
                <div class="font-size-sm"><span class="text-muted mr-2">@Resource.UnitPrice:</span>@product.Price.CurrencySign()</div>
                <div class="font-size-sm"><span class="text-muted mr-2">@Resource.ProductCategory:</span>@product.CategoryName</div>
                @if (product.ProductSpecItems.IsNotEmpty())
                {
                    foreach (var productSpecs in product.ProductSpecItems)
                    {
                        <div class="font-size-sm"><span class="text-muted mr-2">@productSpecs.SpecsName :</span>@productSpecs.SpecsValue </div>
                    }
                }
            </div>
        </div>
        <div class="pt-2 pl-sm-3 mx-auto mx-sm-0 text-center text-sm-left" style="max-width: 10rem;">
            <div class="font-size-sm mb-3"><span class="text-muted mr-2">@Resource.Quantity:</span><span class="font-weight-semibold">@item.Quantity</span></div>
            <div class="font-size-sm mb-3"><span class="text-muted mr-2">@Resource.Total:</span><span class="font-weight-semibold">@item.TotalPrice.CurrencySign()</span></div>
        </div>
    </div>

}