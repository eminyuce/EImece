@using EImece.Domain.Entities;
@using EImece.Domain.Helpers;
@using EImece.Domain.Models.FrontModels;
@{
    var pagingItems = Model as IPaginatedModelList;
    var id = pagingItems.RouteId;
    var sorting = pagingItems.Sorting;
    var filter = pagingItems.Filter;
    var actionName = ViewData["actionName"].ToStr("Category");
    var controllerName = ViewData["controllerName"].ToStr("ProductCategories");
    var styleClassBtn = "btn btn-outline-info rounded btn-sm mb-2 mr-1";
}
@if (pagingItems.TotalPageCount > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center justify-content-sm-start mb-0">
            @if (pagingItems.HasPreviousPage)
            {
                <li class="page-item">
                    <a href=@Url.Action(actionName,controllerName, ProductCategoryViewModel.GetRouteObjectsForPaging(pagingItems, 1))
                       class="@styleClassBtn" aria-label="Frist">
                        <span aria-hidden="true">|<</span>
                        <span class="sr-only">First</span>
                    </a>
                </li>
            }

            <li class="page-item @(pagingItems.HasPreviousPage ? " " : " disabled" )">
                <a href=@Url.Action(actionName,controllerName, ProductCategoryViewModel.GetRouteObjectsForPaging(pagingItems, pagingItems.PageIndex - 1))
                   class="@styleClassBtn" aria-label="Next">
                    <span aria-hidden="true"><</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
            @if (pagingItems.TotalPageCount > 5)
            {
                var beginingIndex = pagingItems.PageIndex - 5;
                if (beginingIndex <= 0)
                {
                    beginingIndex = 1;
                }
                var endIndex = pagingItems.TotalPageCount > 5 + pagingItems.PageIndex ? 5 + pagingItems.PageIndex : pagingItems.TotalPageCount;
                for (var i = beginingIndex; i <= endIndex; i++)
                {
                    var activeLink = i == pagingItems.PageIndex;
                    if (activeLink)
                    {

                        <li class="page-item active d-none d-sm-block" aria-current="page">
                            <span class="btn btn-pill btn-dark btn-sm mb-2 mr-1">
                                @pagingItems.PageIndex<span class="sr-only">(current)</span>
                            </span>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a href=@Url.Action(actionName,controllerName, ProductCategoryViewModel.GetRouteObjectsForPaging(pagingItems, i))
                               class="@styleClassBtn">@i</a>
                        </li>
                    }

                }
            }
            else
            {

                for (var i = 1; i <= pagingItems.TotalPageCount; i++)
                {
                    var activeLink = i == pagingItems.PageIndex;
                    if (activeLink)
                    {

                        <li class="page-item active d-none d-sm-block" aria-current="page">
                            <span class="page-link">
                                @pagingItems.PageIndex<span class="sr-only">(current)</span>
                            </span>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a href=@Url.Action(actionName,controllerName, ProductCategoryViewModel.GetRouteObjectsForPaging(pagingItems, i))
                               class="@styleClassBtn">@i</a>
                        </li>
                    }
                }
            }

            @if (pagingItems.HasNextPage)
            {
                <li class="page-item">
                    <a href=@Url.Action(actionName,controllerName,ProductCategoryViewModel.GetRouteObjectsForPaging(pagingItems,  pagingItems.PageIndex + 1))
                       class="@styleClassBtn" aria-label="Next">
                        <span aria-hidden="true">></span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
            }

            <li class="page-item @(pagingItems.HasNextPage ? " " : " disabled")">
                <a href=@Url.Action(actionName,controllerName,ProductCategoryViewModel.GetRouteObjectsForPaging(pagingItems, pagingItems.TotalPageCount))
                   class="@styleClassBtn" aria-label="Last">
                    <span aria-hidden="true">>|</span>
                    <span class="sr-only">Last</span>
                </a>
            </li>
        </ul>
    </nav>
}