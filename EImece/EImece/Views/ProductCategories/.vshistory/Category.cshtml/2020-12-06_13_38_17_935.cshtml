@model ProductCategoryViewModel
@using EImece.Domain.Entities
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Helpers;
@using EImece.Domain.Models.FrontModels;
@using Resources;
@using EImece.Domain;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Models;
@using EImece.Domain.Models.Enums;
@{

    ProductCategory category = Model.ProductCategory;
    var productsAll = Model.Products;
    var products = new PaginatedModelList<Product>(productsAll, Model.Page, Model.RecordPerPage, productsAll.Count);
    products.RouteId = Model.SeoId;
    products.Filter = Model.Filter;
    products.Sorting = (int)Model.Sorting;
    products.MinPrice = Model.MinPrice;
    products.MaxPrice = Model.MaxPrice;
    var ChildrenProductCategories = Model.ChildrenProductCategories.OrderBy(r => r.Position).ThenByDescending(r => r.UpdatedDate).ToList();

    ViewBag.Title = category.GetSeoTitle();
    ViewBag.Description = category.GetSeoDescription();
    var isUserAuthenticated = User.Identity.IsAuthenticated && AppConfig.IsEditLinkEnable;
}

<div class="page-title-wrapper" aria-label="Page title">
    <div class="container">
        <div class="alert alert-secondary" role="alert">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="mt-n1 mr-1"><i data-feather="home"></i></li>
                    <li class="breadcrumb-item">
                        <a href="@Url.Action("Index","Home")">@Resource.HomePage</a>
                    </li>
                    @if (category.Parent != null && category.Parent.Parent != null)
                    {
                        <li class="breadcrumb-item">
                            <a href="@category.Parent.Parent.DetailPageUrl"> @category.Parent.Parent.Name</a>
                        </li>
                    }
                    @if (category.Parent != null)
                    {
                        <li class="breadcrumb-item">
                            <a href="@category.Parent.DetailPageUrl"> @category.Parent.Name</a>
                        </li>
                    }
                    <li class="breadcrumb-item active">
                        @category.Name
                    </li>
                </ol>
            </nav>
        </div>
        <h1 class="page-title">@category.Name</h1><span class="d-block mt-2 text-muted"></span>
        @if (!string.IsNullOrEmpty(category.ShortDescription))
        {
            <p class="text-muted mb-2">@Html.Raw(category.ShortDescription)</p>
        }


        <hr class="mt-4">


    </div>
</div>


<div class="container pb-5 mb-4">
    <div class="row">
        <div class="col-lg-3">
            <!-- Shop sidebar-->
            <div class="offcanvas-sidebar">
                <div class="offcanvas-sidebar-toggle"><span class="toggle-knob"><i data-feather="chevrons-right"></i>@Resource.Filtrele</span></div>
                <div class="offcanvas-sidebar-body">
                    <div class="offcanvas-sidebar-body-inner">

                        @Html.Partial("_ProductCategoryTreeHeadLine", Model.ProductCategoryTree)
                        <!-- Price range-->

                        <div class="column mb-2 pb-1">
                            <button class="btn btn-primary rounded btn-block mb-2 mr-1" id="FilterButton">@Resource.Filter</button>
                        </div>
                        @foreach (var filterType in Model.CategoryFilterTypes.OrderBy(r=>r.Position))
                        {
                            @CreateFilterTypeList(filterType, Model);
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-9">
            <!-- Toolbar-->
            <div class="d-flex flex-wrap justify-content-center justify-content-sm-between pb-3">
                <div class="d-flex flex-wrap">
                    <div class="form-inline flex-nowrap mr-1 mr-sm-1 pb-1">
                        <div class="button-group tabs">
                            @if (Model.SelectedFilterTypes.IsNotEmpty())
                            {
                                foreach (var selectedFilterType in Model.SelectedFilterTypes)
                                {

                                    <a href="@selectedFilterType.RemoveSelectedFilter(Model.SelectedFilterTypes,products)"
                                       rel="nofollow" class="btn btn-pill btn-outline-dark btn-sm">
                                        @string.Format("{0}: {1}", selectedFilterType.Parent.FilterTypeName.Text, selectedFilterType.name)
                                        <span class="badge badge-pill badge-light">X</span>
                                    </a>
                                }
                                <a href="@Url.Action("Category", "ProductCategories", new { filtreler = ""})"
                                   rel="nofollow" class="btn btn-pill btn-outline-dark btn-sm">
                                    @Resource.RemoveAllFilter
                                </a>

                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-wrap justify-content-center justify-content-sm-between pb-1">
                <div class="d-flex flex-wrap">
                    <div class="form-inline flex-nowrap mr-1 mr-sm-1 pb-1">
                        <label class="text-nowrap mr-2 d-none d-sm-block" for="sorting">@Resource.SortBy:</label>
                        <div class="button-group tabs">
                            <a href="@category.ProductCategoryListPageUrl(SortingType.Newest,products)"
                               rel="nofollow" class="@activeButtonClass(SortingType.Newest, products)">@Resource.NewestItems</a>
                            <a href="@category.ProductCategoryListPageUrl(SortingType.LowHighPrice,products)"
                               rel="nofollow" class="@activeButtonClass(SortingType.LowHighPrice, products)">@Resource.LowHighPriceItems</a>
                            <a href="@category.ProductCategoryListPageUrl(SortingType.HighLowPrice,products)"
                               rel="nofollow" class="@activeButtonClass(SortingType.HighLowPrice, products)">@Resource.HighLowPriceItems</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-wrap justify-content-center justify-content-sm-between pb-3">
                <div class="d-flex flex-wrap">
                    <span class="d-block mt-2">@Html.Raw(string.Format(Resource.ProductFoundInfoForCategory, category.Name, products.Count))</span>
                </div>
            </div>
            <!-- Products grid-->
            <div class="row no-gutters">

                @if (products.IsNotEmpty())
                {
                    foreach (var p in products.GetPagingResult())
                    {

                        @Html.DisplayFor(model => p, "FeaturedProductItem", new { Width = 300, Height = 300 })
                    }
                }
                else
                {
                    <div class="alert alert-secondary alert-with-icon" role="alert">
                        <div class="alert-icon-box"><i class="alert-icon" data-feather="alert-triangle"></i></div>
                        @if (Model.SelectedFilterTypes.IsNotEmpty())
                        {
                            @Html.Raw(@Resource.NoProductsFoundForSelectedFilters)
                        }
                        else
                        {
                            @Html.Raw(@Resource.NoProductsFoundForCategory)
                        }
                    </div>
                }
            </div>
            <div class="offset-md-4 col-md-8 pb-5">
                @Html.Partial("_PaginatedModelList", products)
            </div>
        </div>
    </div>
</div>
@functions {

    public string activeButtonClass(SortingType selected, IPaginatedModelList products)
    {
        return String.Format("{0}", products.Sorting == (int)selected ? "btn btn-pill btn-secondary mb-2 mr-1" : "btn btn-pill btn-outline-secondary mb-2 mr-1");
    }
}

@helper CreateFilterTypeList(CategoryFilterType categoryFilter, ProductCategoryViewModel productCategoryViewModel)
{

    var selectedFilters = productCategoryViewModel.SelectedFilters;

    if (categoryFilter.FilterTypeName.FilterType == FilterType.Rating)
    {

        <!-- Price filter    -->
        <div class="widget mb-4 pb-1">
            <h3 class="widget-title">@categoryFilter.FilterTypeName.Text</h3>
            @foreach (var filter in categoryFilter.CategoryFilters)
            {
                var filterId = @String.Format("filter-{0}", filter.CategoryFilterId);
                <div class="custom-control custom-checkbox mb-1">
                    <input class="custom-control-input" type="checkbox" @String.Format("{0}", selectedFilters.Contains(filter.CategoryFilterId) ? "checked" : "") value="@filter.CategoryFilterId" name="filters" id="@filterId">
                    <label class="custom-control-label" for="@filterId">
                        @for (int i = 0; i < filter.rating; i++)
                        {
                            @:<i class="sr-star active" data-feather="star"></i>
                        }
                        <span class="badge text-muted ml-1">(@filter.name)</span>
                    </label>
                </div>
            }
        </div>

    }
    else
    {
        <!-- Price filter    -->
        <div class="widget mb-4 pb-1">
            <h3 class="widget-title">@categoryFilter.FilterTypeName.Text</h3>
            @foreach (var filter in categoryFilter.CategoryFilters)
            {
                var filterId = @String.Format("filter-{0}", filter.CategoryFilterId);
                <div class="custom-control custom-checkbox mb-1">
                    <input class="custom-control-input" type="checkbox" @String.Format("{0}", selectedFilters.Contains(filter.CategoryFilterId) ? "checked" : "") value="@filter.CategoryFilterId" name="filters" id="@filterId">
                    <label class="custom-control-label" for="@filterId">
                        @filter.name
                        @if (filter.count > 0)
                        {
                            <span class="text-muted ml-1">(@filter.count)</span>
                        }
                    </label>
                </div>
            }
        </div>
        if (categoryFilter.FilterTypeName.FilterType == FilterType.Price)
        {

            <div class="widget mb-4 pb-1">
                <h3 class="widget-title">@Resource.FilterByPrice</h3>
                <div class="d-flex align-items-center">
                    <div>
                        <div class="input-group">
                            <input class="form-control" type="text" id="minPriceOrginal" placeholder="Min TL" value="@Model.MinPrice" title="Lütfen bir tam sayı giriniz">
                        </div>
                    </div>
                    <div class="mx-1 pt-12">&ndash;</div>
                    <div>
                        <div class="input-group">
                            <input class="form-control" type="text" id="maxPriceOrginal" placeholder="Max TL" value="@Model.MaxPrice" title="Lütfen bir tam sayı giriniz">
                        </div>
                    </div>
                </div>
            </div>

        }
    }

}
<input type="hidden" id="noUrlFilter" value="@Url.Action("Category", "ProductCategories",new { id=Model.SeoId })" />
<input type="hidden" id="urlFilter" value="@Url.Action("Category", "ProductCategories", new { id=Model.SeoId, filtreler = "js-filtreler" })" />
<input type="hidden" id="urlFilterMinMaxPage" value="@Url.Action("Category", "ProductCategories", new { id=Model.SeoId,filtreler = "js-filtreler", minPrice = "js-min", maxPrice = "js-max" })" />
<input type="hidden" id="urlMinMaxPage" value="@Url.Action("Category", "ProductCategories", new { id=Model.SeoId, minPrice = "js-min", maxPrice = "js-max" })" />
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        $(document).ready(function () {

            function GetSelectedCheckBoxValuesArray() {
                var stringArray = new Array();
                var i = 0;
                $("input[name=filters]").each(function () {
                    var m = $(this).is(':checked');
                    if (m) {
                        stringArray[i++] = $(this).attr("value");
                    }
                });
                return stringArray;
            }

            $("#FilterButton").click(function () {

                var minPriceOrginal = $("#minPriceOrginal").val();
                var maxPriceOrginal = $("#maxPriceOrginal").val();
                var hasPrice = (!isEmpty(minPriceOrginal) && parseInt(minPriceOrginal) > 0) || (!isEmpty(maxPriceOrginal) && parseInt(maxPriceOrginal) > 0);
                var strArrayFilter = GetSelectedCheckBoxValuesArray();

                var link = "";
                if (hasPrice && strArrayFilter.length === 0) {
                    link = $("#urlMinMaxPage").val()
                        .replace("js-min", minPriceOrginal)
                        .replace("js-max", maxPriceOrginal);
                } else if (hasPrice && strArrayFilter.length > 0) {
                    link = $("#urlFilterMinMaxPage").val().replace("js-filtreler", encodeURIComponent(strArrayFilter.join("-")))
                        .replace("js-min", minPriceOrginal)
                        .replace("js-max", maxPriceOrginal);
                }
                else if (!hasPrice && strArrayFilter.length === 0) {
                    link = $("#noUrlFilter").val();
                } else if (!hasPrice && strArrayFilter.length > 0) {
                    link = $("#urlFilter").val().replace("js-filtreler", encodeURIComponent(strArrayFilter.join("-")));;
                } else {
                    console.log("-------error");
                }
                console.log(hasPrice);
                console.log(strArrayFilter);
                console.log(strArrayFilter.length);
                console.log(link);
                window.location = link;
            });

        });
    </script>
}