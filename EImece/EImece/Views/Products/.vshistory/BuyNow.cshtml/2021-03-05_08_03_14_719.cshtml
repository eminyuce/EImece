@model EImece.Domain.Models.FrontModels.ProductDetailViewModel
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Helpers;
@using EImece.Domain;
@using Resources;
@using EImece.Domain.Entities
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Helpers;
@using EImece.Domain.Models.FrontModels;
@using Resources;
@using EImece.Domain;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Models.Enums;
@using System.Collections.Immutable;
@using System.Text.RegularExpressions;


@{
    var product = Model.Product;
    var sharedSocialLinks = Model.SocialMediaLinks;
    var ProductSizeOptions = Regex.Split(product.ProductSizeOptions.ToStr(), @",").Select(r => r.Trim()).Where(s => !String.IsNullOrEmpty(s)).ToList();
    var ProductColorOptions = Regex.Split(product.ProductColorOptions.ToStr(), @",").Select(r => r.Trim()).Where(s => !String.IsNullOrEmpty(s)).ToList();

    var isUserAuthenticated = User.Identity.IsAuthenticated && AppConfig.IsEditLinkEnable;
    ViewBag.Title = product.GetProductSeoTitle();
    ViewBag.Description = product.GetSeoDescription();
    ViewBag.Keywords = product.GetSeoKeywords();
    Layout = "~/Views/Shared/_Layout.cshtml";
    var productFiles = product.ProductFiles.ToList();
    var productTags = product.ProductTags.Select(r => r.Tag).ToList();
    var productCategory = product.ProductCategory;
    var productSpecs = product.ProductSpecifications;
    var relatedStories = Model.RelatedStories.OrderBy(x => Guid.NewGuid()).Take(1).ToList();
    var relatedProducts = Model.RelatedProducts.ToList();
    var productMainImageId = product.MainImageId.HasValue ? product.MainImageId.Value : 0;

    Model.ProductComment.ProductId = product.Id;
    Model.ProductComment.SeoUrl = product.GetSeoUrl();
    var productComments = product.ProductComments.IsNotEmpty() ? product.ProductComments : new List<ProductComment>();
    var mainImageImgSrc = product.MainImageSrc.Item1;
    var mainImageImgSrcUrl = product.GetCroppedImageUrl(productMainImageId, 610, 0);
    var mainImageThbImgSrc = product.GetCroppedImageUrl(productMainImageId, 95, 105);
    var productSpecsExists = Model.ProdSpecs.IsNotEmpty();
}
