@model EImece.Domain.Models.FrontModels.SimiliarProductTagsViewModel
@using GenericRepository;
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Helpers;
@using EImece.Domain;
@using Resources;
@{
    PaginatedList<ProductTag> productTags = Model.ProductTags;
    var tag = Model.Tag;
    ViewBag.Title = tag.GetSeoTitle();
    ViewBag.Description = String.Join(",", productTags.Select(r => r.Product.Name)).ToStr(150);
    Layout = "~/Views/Shared/_Layout.cshtml";

    var isUserAuthenticated = User.Identity.IsAuthenticated && AppConfig.IsEditLinkEnable;
}

<div class="container potrfolio-container">

    <section class="title">
        <h2>
            @tag.Name
        </h2>
    </section>

    <div class="clearfix"></div>

    @if (productTags.TotalCount > productTags.PageSize)
    {
        <div class="pagination-container">
            <nav class="pagination">
                <div class="paging">

                    @Html.BootstrapPager(productTags.PageIndex,
                index => Url.Action("Tag", "Products", new { page = index }),
                productTags.TotalCount, productTags.PageSize, numberOfLinks: 10)
                </div>
            </nav>
        </div>

    }

    <div class="row no-gutters">
        @foreach (var item in productTags)
        {
            @Html.DisplayFor(model => item.Product, "SearchProductItem", new { Width = 300, Height = 300 })
        }
    </div>
</div>