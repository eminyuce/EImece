@model EImece.Domain.Models.FrontModels.ProductDetailViewModel
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Helpers.Extensions;

@{
    var product = Model.Product;
    ViewBag.Title = product.GetSeoTitle();
    ViewBag.Description = product.GetSeoDescription();
    Layout = "~/Views/Shared/_Layout.cshtml";
    var productFiles = product.ProductFiles;
    var productTags = product.ProductTags.Select(r => r.Tag).ToList();
    var productCategory = product.ProductCategory;
}

<h2>Detail</h2>


<div>
    <h4>Product @productCategory.Name</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => product.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.EntityHash)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.EntityHash)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.CreatedDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.CreatedDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.UpdatedDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.UpdatedDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.IsActive)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.IsActive)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.Position)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.Position)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.Lang)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.Lang)
        </dd>

     

        <dd>
            @Html.Raw(product.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.ImageState)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.ImageState)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.MainImageId)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.MainImageId)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.ProductCategoryId)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.ProductCategoryId)
        </dd>

        <dt>
            @product.MainImageId.HasValue
            @Html.DisplayFor(model => product.MainImageId)
         @Html.Raw(product.GetCroppedImageTag(500, 500))
        </dt>

        <dd>
            @Html.DisplayFor(model => product.MainPage)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.Price)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.Price)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.Discount)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.Discount)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => product.ProductCode)
        </dt>

        <dd>
            @Html.DisplayFor(model => product.ProductCode)
        </dd>

    </dl>
</div>

 @foreach(var pt in productTags)
 {
     <div>
       @Html.ActionLink(pt.Name, "tag", "products", new { id = pt.GetSeoUrl() }, null)
     </div>
 }
@foreach (var productFile in productFiles)
{
    <div>
        @Html.Raw(productFile.GetCroppedImageTag(productFile.FileStorageId,100, 200))
    </div>
}