@model EImece.Domain.Models.FrontModels.ProductDetailViewModel
@using EImece.Domain.Entities;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Helpers;
@using EImece.Domain;
@using Resources;
@using EImece.Domain.Entities
@using EImece.Domain.Helpers.Extensions;
@using EImece.Domain.Helpers;
@using EImece.Domain.Models.FrontModels;
@using Resources;
@using EImece.Domain;
@using EImece.Domain.Helpers.HtmlHelpers;
@using EImece.Domain.Models.Enums;
@using System.Collections.Immutable;
@using System.Text.RegularExpressions;

@{
    var product = Model.Product;
    ProductState productState = product.StateEnum;
    var sharedSocialLinks = Model.SocialMediaLinks;
    var ProductSizeOptions = Regex.Split(product.ProductSizeOptions.ToStr(), @",").Select(r => r.Trim()).Where(s => !String.IsNullOrEmpty(s)).ToList();
    var ProductColorOptions = Regex.Split(product.ProductColorOptions.ToStr(), @",").Select(r => r.Trim()).Where(s => !String.IsNullOrEmpty(s)).ToList();

    var isUserAuthenticated = User.Identity.IsAuthenticated && AppConfig.IsEditLinkEnable;
    ViewBag.Title = product.GetProductSeoTitle();
    ViewBag.Description = product.GetSeoDescription();
    ViewBag.Keywords = product.GetSeoKeywords();
    Layout = "~/Views/Shared/_Layout.cshtml";
    var productFiles = product.ProductFiles.ToList();
    var productTags = product.ProductTags.Select(r => r.Tag).Where(r=>r.TagCategory.IsActive).ToList();
    var productCategory = product.ProductCategory;
    var productSpecs = product.ProductSpecifications;
    var relatedStories = Model.RelatedStories.OrderBy(x => Guid.NewGuid()).Take(1).ToList();
    var relatedProducts = Model.RelatedProducts.ToList();
    var productMainImageId = product.MainImageId.HasValue ? product.MainImageId.Value : 0;

    Model.ProductComment.ProductId = product.Id;
    Model.ProductComment.SeoUrl = product.GetSeoUrl();
    var productComments = product.ProductComments.IsNotEmpty() ? product.ProductComments : new List<ProductComment>();
    var productCommentsPaging = new PaginatedModelList<ProductComment>(productComments, Model.Page, Model.RecordPerPage, productComments.Count);
    productCommentsPaging.RouteId = Model.SeoId;

    var mainImageImgSrc = product.MainImageSrc.Item1;
    var mainImageImgSrcUrl = product.GetCroppedImageUrl(productMainImageId, 610, 0);
    var mainImageThbImgSrc = product.GetCroppedImageUrl(productMainImageId, 95, 105);
    var productSpecsExists = Model.ProdSpecs.IsNotEmpty();

    var productPriceEnabled = Model.IsProductPriceEnable.SettingValue.ToBool(true);
    var productReviewEnable = Model.IsProductReviewEnable.SettingValue.ToBool(true);

    var productSchemaJson = Model.GoogleProductSchemaJson;

    int imageWidth = 800;
    int imageHeight = 600;

    if (product.MainImage != null)
    {
        if (product.MainImage.Width > 0)
                {
                    imageWidth = product.MainImage.Width;
                }

        if (product.MainImage.Height > 0)
        {
            imageHeight = product.MainImage.Height;
        }

    }
}


<!-- Add this to your head section -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<input type="hidden" name="productReviewEnable" value="@productReviewEnable.ToString().ToLower()" />
<input type="hidden" name="productPriceEnabled" value="@productPriceEnabled.ToString().ToLower()" />

@section HeadExtra {

    <meta property="og:locale" content="tr_TR" />
    <meta property="og:type" content="product" />
    <meta property="og:site_name" content="@Html.Action("GetCompanyName", "Home")" />
    <meta property="og:image" content="@product.ImageFullPath(imageWidth,imageHeight)" />
    <meta property="og:image:width" content="@imageWidth" />
    <meta property="og:image:height" content="@imageHeight" />
    <meta property="og:title" content="@product.GetProductSeoTitle()" />
    <meta property="og:description" content="@HttpUtility.HtmlDecode(GeneralHelper.RemoveHtmlTags(product.ShortDescription))" />
    <meta property="og:url" content="@product.DetailPageAbsoluteUrl" />
    <meta property="product:price:amount" content="@product.PriceWithDiscount" />
    <meta property="product:price:currency" content="@Constants.CURRENCY_TURKISH" />

    <script type="application/ld+json">
        @Html.Raw(productSchemaJson)
    </script>
}

<!-- Page Title-->
<div class="page-title-wrapper" aria-label="Page title">
    <div class="container">
        <div class="alert alert-secondary" role="alert">
            @Html.Partial("_ProductBreadCrumb", Model)
        </div>
        <h1 class="page-title">@product.ProductNameStr</h1><span class="d-block mt-2 text-muted"></span>
        <hr class="mt-4">
        @if (product.Brand != null)
        {
            <span class="d-block mt-1 text-muted">@Resource.ProductBrand : <strong>@product.Brand.Name</strong></span>
        }
        <span class="d-block mt-1 text-muted">@Resource.ProductCode : <strong>@product.ProductCode</strong></span>
        <span class="d-block mt-1 text-muted">@Html.Raw(product.ShortDescription)</span>
    </div>
</div>

<!-- Page Content-->
<!-- Toast notifications-->
<div class="toast-container toast-bottom-center">
    <div class="toast mb-3" id="cart-toast" data-delay="5000" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <i class="mr-2" data-feather="check-circle" style="width: 1.25rem; height: 1.25rem;"></i><span class="font-weight-semibold mr-auto">@Resource.AddedToCart</span>
            <button class="close text-white ml-2 mb-1" type="button" data-dismiss="toast" aria-label="Close"><span aria-hidden="true">×</span></button>
        </div>
        <div class="toast-body">@Resource.ThisItemAddedYourCart</div>
    </div>
</div>

<input type="hidden" name="productId" id="productId" value="@product.ModifiedId">
<div class="container pb-4">
    <div class="row">
        <div class="col-lg-7">
            <!-- Product gallery-->
            <div class="product-gallery">
                <ul class="product-thumbnails">
                    @if (product.ImageState && !string.IsNullOrEmpty(mainImageThbImgSrc))
                    {
                        <li class="active">
                            <a href="#one">
                                <img alt="@product.Name" src="@mainImageThbImgSrc" width="95" height="105" />
                            </a>
                        </li>
                    }
                    @for (int i = 0; i < productFiles.Count; i++)
                    {
                        var f = productFiles[i];
                        var imgTag = f.GetCroppedImageUrl(f.FileStorageId, 95, 105);
                        <li class="">
                            <a href="@string.Format("#{0}",Constants.NumbersArr.ElementAt(i))">
                                <img alt="@f.Name" src="@imgTag" />
                            </a>
                        </li>
                    }
                </ul>
                <div class="product-carousel owl-carousel">
                    @if (product.ImageState && !string.IsNullOrEmpty(mainImageImgSrc))
                    {
                        <a href="@mainImageImgSrcUrl" data-fancybox="prod-gallery" data-hash="one">
                            <img src="@mainImageImgSrc" width="610" height="610" alt="@product.Name">
                        </a>
                    }
                    else
                    {
                        <a href="@EImece.Domain.AppConfig.GetDefaultImage("w610h610")" data-fancybox="prod-gallery" data-hash="one">
                            <img src="@EImece.Domain.AppConfig.GetDefaultImage("w610h610")" width="610" height="610" alt="Product">
                        </a>
                    }
                    @for (int i = 0; i < productFiles.Count; i++)
                    {
                        var f = productFiles[i];
                        var imgTag = f.GetCroppedImageUrl(f.FileStorageId, 1000, 0);
                        if (!string.IsNullOrEmpty(imgTag))
                        {
                            <a href="@imgTag" data-fancybox="prod-gallery" data-hash="@string.Format("{0}",Constants.NumbersArr.ElementAt(i))">
                                <img src="@imgTag" alt="@f.Name">
                            </a>
                        }
                    }
                </div>
            </div>
        </div>
        <!-- Product details -->
        <div class="col-lg-5 pt-4 pt-lg-0">
            <div class="pb-4">
                @if (productReviewEnable && product.ProductComments.IsNotEmpty())
                {
                    <a class="d-inline-block scroll-to" href="#reviews">
                        <div class="star-rating">
                            @for (int i = 0; i < 5; i++)
                            {
                                if (i + 1 > product.Rating)
                                {
                                    <i class="sr-star" data-feather="star"></i>
                                }
                                else
                                {
                                    <i class="sr-star active" data-feather="star"></i>
                                }
                            }
                        </div><span class="d-inline-block align-middle font-size-sm mt-1 ml-1 text-body">@product.ProductComments.Count @Resource.Review</span>
                    </a>
                }
                @if (productPriceEnabled)
                {
                    <h2 class="h1 font-weight-light pt-3 pb-2">
                        @if (product.HasDiscount)
                        {
                            <del class="lead text-muted mr-2">
                                @product.Price.CurrencySign()
                            </del>
                        }
                        <span class="text-primary">@product.PriceWithDiscount.CurrencySign()</span>
                    </h2>
                    if (product.HasDiscount)
                    {
                        <h4>
                            <span class="badge badge-pill badge-warning mr-2 mb-2">
                                @string.Format("%{0} {1}", product.DiscountPercentage, Resource.Discount)
                            </span>
                        </h4>
                    }
                }

                <!-- Display Product State Message -->
                <div class="mb-3">
                    @switch (productState)
                    {
                        case ProductState.ProductInStock:
                            <span class="badge badge-success badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.ProductInStock</span>
                            break;
                        case ProductState.ProductOutOfStock:
                            <span class="badge badge-danger badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.ProductOutOfStock</span>
                            break;
                        case ProductState.PreOrder:
                            <span class="badge badge-info badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.PreOrderAvailable</span>
                            break;
                        case ProductState.Discontinued:
                            <span class="badge badge-dark badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.Discontinued</span>
                            break;
                        case ProductState.Backorder:
                            <span class="badge badge-warning badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.BackorderAvailable</span>
                            break;
                        case ProductState.ComingSoon:
                            <span class="badge badge-primary badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.ComingSoon</span>
                            break;
                        case ProductState.LimitedStock:
                            <span class="badge badge-success badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.LimitedStockAvailable</span>
                            break;
                        case ProductState.Reserved:
                            <span class="badge badge-secondary badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.ReservedForCustomers</span>
                            break;
                        case ProductState.AwaitingRestock:
                            <span class="badge badge-warning badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.AwaitingRestock</span>
                            break;
                        case ProductState.NotForSale:
                            <span class="badge badge-dark badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.NotForSale</span>
                            break;
                        default:
                            <span class="badge badge-secondary badge-pill" style="font-size: 1.5rem; padding: 0.5rem 1rem;">@Resource.NONE</span>
                            break;
                    }
                </div>

                @if (ProductSizeOptions.IsNotEmpty())
                {
                    <div class="form-group">
                        <div class="pb-2 text-right"></div>
                        <select data-product-selected-specs="@product.ModifiedId" class="form-control custom-select" id="color" name="@Resource.ProductSize" required>
                            @foreach (var pSize in ProductSizeOptions)
                            {
                                <option value="@pSize">@pSize</option>
                            }
                        </select>
                    </div>
                }
                @if (ProductColorOptions.IsNotEmpty())
                {
                    <div class="form-group">
                        <div class="pb-2 text-right"></div>
                        <select data-product-selected-specs="@product.ModifiedId" class="form-control custom-select" id="color" name="@Resource.ProductColor" required>
                            @foreach (var pColor in ProductColorOptions)
                            {
                                <option value="@pColor">@pColor</option>
                            }
                        </select>
                    </div>
                }

                <!-- Conditional Add to Cart / Action Buttons Based on Product State -->
                @if (productPriceEnabled)
                {
                    switch (productState)
                    {
                        case ProductState.ProductInStock:
                        case ProductState.LimitedStock:
                            <div class="d-flex align-items-center pt-2">
                                <input class="px-2 form-control mr-2" min="1" id="quantity" type="number" name="quantity" style="width: 3.2rem;" value="1" required>
                                <button id="AddToCart" class="btn btn-primary btn-block" type="button" data-toggle="toast" data-target="#cart-toast">
                                    <i class="mr-2" data-feather="shopping-cart"></i>@Resource.AddToCart
                                </button>
                            </div>
                            break;
                        case ProductState.PreOrder:
                            <div class="d-flex align-items-center pt-2">
                                <button id="PreOrder" class="btn btn-info btn-block" type="button">
                                    <i class="mr-2" data-feather="clock"></i>@Resource.PreOrder
                                </button>
                            </div>
                            break;
                        case ProductState.Backorder:
                            <div class="d-flex align-items-center pt-2">
                                <button id="Backorder" class="btn btn-warning btn-block" type="button">
                                    <i class="mr-2" data-feather="truck"></i>@Resource.Backorder
                                </button>
                            </div>
                            break;
                        case ProductState.ProductOutOfStock:
                        case ProductState.Discontinued:
                        case ProductState.NotForSale:
                            <div class="d-flex align-items-center pt-2">
                                <button class="btn btn-secondary btn-block" type="button" disabled>
                                    <i class="mr-2" data-feather="x-circle"></i>@Resource.Unavailable
                                </button>
                            </div>
                            break;
                        case ProductState.ComingSoon:
                        case ProductState.AwaitingRestock:
                            <div class="d-flex align-items-center pt-2">
                                <button class="btn btn-primary btn-block" type="button" disabled>
                                    <i class="mr-2" data-feather="clock"></i>@Resource.ComingSoon
                                </button>
                            </div>
                            break;
                        case ProductState.Reserved:
                            <div class="d-flex align-items-center pt-2">
                                <button class="btn btn-secondary btn-block" type="button" disabled>
                                    <i class="mr-2" data-feather="lock"></i>@Resource.Reserved
                                </button>
                            </div>
                            break;
                        default:
                            <div class="d-flex align-items-center pt-2">
                                <button class="btn btn-secondary btn-block" type="button" disabled>
                                    <i class="mr-2" data-feather="info"></i>@Resource.UnknownState
                                </button>
                            </div>
                            break;
                    }

                    <!-- WhatsApp Order Option -->
                    <div class="d-flex align-items-center pt-2">
                        <a href="@Model.WhatsAppCommunicationLinkGenerateScript"
                           target="_blank"
                           class="col-auto button urun-detay-whatsapp hstack"
                           aria-label="WhatsApp ile sipariş ver">
                            <img src="https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg"
                                 alt="WhatsApp simgesi"
                                 width="20"
                                 class="whatsapp-icon">
                            <span>WhatsApp İle Sipariş</span>
                        </a>
                    </div>
                }
            </div>

            <!-- Product panels-->
            <div class="accordion" id="productPanels">
                <div class="card">
                    <div class="card-header">
                        <h3 class="accordion-heading">
                            <a href="#productInfo" role="button" data-toggle="collapse" aria-expanded="true" aria-controls="productInfo">
                                <span class="d-inline-block pr-2 border-right mr-2 align-middle mt-n1">
                                    <i data-feather="info" style="width: 1.1rem; height: 1.1rem;"></i>
                                </span>@Resource.ProductInformation
                                <span class="accordion-indicator">
                                    <i data-feather="chevron-up"></i>
                                </span>
                            </a>
                        </h3>
                    </div>
                    <div class="collapse show" id="productInfo" data-parent="#productPanels">
                        <div class="card-body">
                            @if (product.Brand != null && !String.IsNullOrEmpty(product.Brand.Name))
                            {
                                <span class="product-code">
                                    <i>@Resource.ProductBrand : @product.Brand.Name</i>
                                </span>
                                <br />
                            }
                            @if (!String.IsNullOrEmpty(product.ProductCode))
                            {
                                <span class="product-code">
                                    <i>@Resource.ProductCodeNo @product.ProductCode</i>
                                </span>
                                <br />
                            }
                            @Html.Raw(product.ShortDescription)
                        </div>
                    </div>
                </div>
                @if (Model.CargoDescription.IsNotEmpty())
                {
                    <div class="card">
                        <div class="card-header">
                            <h3 class="accordion-heading">
                                <a class="collapsed" href="#shippingOptions" role="button" data-toggle="collapse" aria-expanded="false" aria-controls="shippingOptions">
                                    <span class="d-inline-block pr-2 border-right mr-2 align-middle mt-n1">
                                        <i data-feather="truck" style="width: 1.1rem; height: 1.1rem;"></i>
                                    </span>@Resource.ShippingOptions
                                    <span class="accordion-indicator">
                                        <i data-feather="chevron-up"></i>
                                    </span>
                                </a>
                            </h3>
                        </div>
                        <div class="collapse" id="shippingOptions" data-parent="#productPanels">
                            <div class="card-body">
                                @Html.Raw(Model.CargoDescription.SettingValue)
                            </div>
                        </div>
                    </div>
                }
                @if (productTags.IsNotEmpty())
                {
                    <div class="card">
                        <div class="card-header">
                            <h3 class="accordion-heading">
                                <a class="collapsed" href="#tagCloud" role="button" data-toggle="collapse" aria-expanded="false" aria-controls="tagCloud">
                                    <span class="d-inline-block pr-2 border-right mr-2 align-middle mt-n1">
                                        <i data-feather="tag" style="width: 1.1rem; height: 1.1rem;"></i>
                                    </span>@Resource.Tags
                                    <span class="accordion-indicator">
                                        <i data-feather="chevron-up"></i>
                                    </span>
                                </a>
                            </h3>
                        </div>
                        <div class="collapse" id="tagCloud" data-parent="#productPanels">
                            <div class="card-body">
                                @foreach (var t in productTags)
                                {
                                    <a class="tag-link mr-2 mb-2" href="@t.DetailPageRelativeUrlForProducts">@String.Format("#{0}", t.Name)</a>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (Model.SocialMediaLinks.IsNotEmpty())
            {
                @CreateSocialMediaLinks(Model.SocialMediaLinks)
            }
        </div>
    </div>
</div>

<!-- Tabs Section -->
<div class="container mt-4">

    <!-- Update your tabs section with icons -->
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="true">
                <i class="fas fa-file-alt me-2"></i> @Resource.Description
            </button>
        </li>
        @if (productReviewEnable)
        {
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false">
                    <i class="fas fa-comments me-2"></i> @Resource.CommentSection
                </button>
            </li>
        }
        @if (!string.IsNullOrEmpty(product.VideoUrl))
        {
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#video" type="button" role="tab" aria-controls="profile" aria-selected="false">
                    <i class="fas fa-comments me-2"></i> @Resource.VideoUrl
                </button>
            </li>
        }
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact" type="button" role="tab" aria-controls="contact" aria-selected="false">
                <i class="fas fa-credit-card me-2"></i> @Resource.PaymentSection
            </button>
        </li>
    </ul>

    <!-- Tab content -->
    <div class="tab-content p-3 border border-top-0" id="myTabContent">
        <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
            @ProductDescriptionHelper(Model)
        </div>
        @if (productReviewEnable)
        {
            <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                @ProductCommentsHelper(Model)
            </div>
        }
        @if (!string.IsNullOrEmpty(product.VideoUrl))
        {
            <div class="tab-pane fade" id="video" role="tabpanel" aria-labelledby="video-tab">
                @ProductVideoHelper(Model)
            </div>
        }
        <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
            @PaymentOptionsHelper(Model)
        </div>
    </div>
</div>
<br />

@helper ProductDescriptionHelper(EImece.Domain.Models.FrontModels.ProductDetailViewModel model)
{
    var productSpecsExists = model.ProdSpecs.IsNotEmpty();
    var product = Model.Product;

    <div class="container pt-sm-3 pb-sm-3">
        <div class="row">
            <div class="@string.Format("{0}", productSpecsExists ? "col-md-6" : "col-md-12")">
                <div class="mb-2 pb-2">@Html.Raw(product.Description)</div>
            </div>
            @if (productSpecsExists)
            {
                <div class="col-md-6">
                    <h3 class="h5 mb-3">@Resource.Specifications</h3>
                    <ul class="list-unstyled mb-2 pb-2">
                        @foreach (var specs in Model.ProdSpecs)
                        {
                            <li class="d-block pb-2 border-bottom"><strong>@specs.specsName:</strong> @Html.Raw(specs.value) @specs.unit</li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
}

@helper ProductVideoHelper(EImece.Domain.Models.FrontModels.ProductDetailViewModel model)
{
    var product = model.Product;
    var videoUrl = product.VideoUrl;

    var videoUrls = SplitByCommaOrSemicolonOrNewline(videoUrl);

    <div class="container pt-sm-3 pb-sm-3">
        <div class="row">
            @if (videoUrls.Any())
            {
                if (videoUrls.Count == 1)
                {
                    // If there is only one video URL, take up the full width
                    var videoId = ExtractYouTubeVideoId(videoUrls.First());

                    if (!string.IsNullOrEmpty(videoId))
                    {
                        var embedUrl = string.Format("https://www.youtube.com/embed/{0}", videoId);
                        <div class="col-12 mb-4">
                            <div class="ratio ratio-16x9">
                                <iframe src="@embedUrl"
                                        title="YouTube video player"
                                        frameborder="0"
                                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                        allowfullscreen>
                                </iframe>
                            </div>
                        </div>
                    }
                    else
                    {
                        // If the URL isn't a valid YouTube link, display it as text
                        <div class="col-12 mb-4">
                            <span>@videoUrls.First()</span>
                        </div>
                    }
                }
                else
                {
                    // If there are multiple video URLs, display them in grid format
                    foreach (var url in videoUrls)
                    {
                        var videoId = ExtractYouTubeVideoId(url);

                        if (!string.IsNullOrEmpty(videoId))
                        {
                            var embedUrl = string.Format("https://www.youtube.com/embed/{0}", videoId);
                            <div class="col-md-6 mb-4">
                                <div class="ratio ratio-16x9">
                                    <iframe src="@embedUrl"
                                            title="YouTube video player"
                                            frameborder="0"
                                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                            allowfullscreen>
                                    </iframe>
                                </div>
                            </div>
                        }
                        else
                        {
                            // If the URL isn't a valid YouTube link, display it as text
                            <div class="col-md-6 mb-4">
                                <span>@url</span>
                            </div>
                        }
                    }
                }
            }
            else
            {
                <div class="col-12">
                    <span>No valid video URLs provided.</span>
                </div>
            }
        </div>
    </div>
}

@helper ProductCommentsHelper(EImece.Domain.Models.FrontModels.ProductDetailViewModel model)
{
    var product = model.Product;
    var productComments = product.ProductComments.IsNotEmpty() ? product.ProductComments : new List<ProductComment>();
    var productCommentsPaging = new PaginatedModelList<ProductComment>(productComments, Model.Page, Model.RecordPerPage, productComments.Count);
    productCommentsPaging.RouteId = Model.SeoId;
    var productReviewEnable = model.IsProductReviewEnable.SettingValue.ToBool(true);


    <div class="row pt-sm-3">
        <div class="col-md-4 pb-5">
            <div class="card">
                <div class="card-body">
                    @if (productComments.IsNotEmpty())
                    {
                        <div class="d-flex justify-content-center align-items-end pt-2 pb-4">
                            <div class="display-4 mr-2">@Model.AverageRating</div>
                            <div>
                                <div class="text-muted font-size-xs mb-n1">@Model.TotalRating.Sum(r => r.Value.Count) @Resource.Review</div>
                                <div class="star-rating">
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        if (i < product.Rating)
                                        {
                                            <i class="sr-star active" data-feather="star"></i>
                                        }
                                        else
                                        {
                                            <i class="sr-star" data-feather="star"></i>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        foreach (var item in Model.TotalRating)
                        {
                            <div class="font-size-sm font-weight-semibold mb-2">@item.Key stars - <span class="text-muted">@item.Value.Count</span></div>
                            <div class="progress mb-3" style="height: 2px;">
                                <div class="progress-bar bg-warning" role="progressbar" style="width: @item.Value.Percentage%" aria-valuenow="@item.Value.Percentage" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        }
                    }
                    <div class="py-2"><a class="btn btn-warning btn-block" href="#leaveReview" data-toggle="modal">@Resource.LeaveReview</a></div>
                </div>
            </div>
        </div>
        @if (productReviewEnable)
        {
            if (productCommentsPaging.IsNotEmpty())
            {
                <div class="col-md-8 pb-5">
                    <h2 class="h3">@Resource.LatestReviews</h2>
                    @foreach (var productComment in productCommentsPaging.GetPagingResult())
                    {
                        @createReviewItem(productComment)
                    }
                </div>
                <div class="offset-md-5 col-md-8 pb-5">
                    @Html.Partial("_PaginatedModelList", productCommentsPaging, new ViewDataDictionary
                    {
                        { "actionName", "Detail" },
                        { "controllerName", "Products" }
                    })
                </div>
            }
            else
            {
                <div class="col-md-8 pb-5">
                    <div class="alert alert-secondary">
                        <div class="pt-3 pb-2 text-center">
                            @Resource.NoCommentForProductYet
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}

@helper PaymentOptionsHelper(EImece.Domain.Models.FrontModels.ProductDetailViewModel model)
{
    <div class="card-body">
        <h3 class="card-title mb-4">💳 İyzico ile Güvenli Ödeme</h3>
        <p class="card-text">
            <strong>Siz alışverişin keyfini çıkarın, ödeme güvenliğini İyzico’ya bırakın.</strong>
        </p>
        <p class="card-text">
            İyzico, Türkiye'nin önde gelen ödeme altyapı sağlayıcılarından biridir ve milyonlarca kullanıcı tarafından güvenle tercih edilmektedir.
            Web sitemiz üzerinden yapacağınız ödemelerde İyzico altyapısı kullanılmaktadır. Bu sayede:
        </p>
        <ul class="list-group list-group-flush mb-4">
            <li class="list-group-item">🔐 <strong>Kart bilgileriniz 256-bit SSL ile şifrelenir</strong> ve güvenle saklanır.</li>
            <li class="list-group-item">🧾 <strong>Her ödeme İyzico güvencesi altındadır.</strong> Ödemeniz tarafımıza ulaşmadan önce doğrulanır.</li>
            <li class="list-group-item">🔄 <strong>Kolay iade ve iptal süreçleri</strong> sayesinde alışveriş deneyiminiz kontrolünüzdedir.</li>
            <li class="list-group-item">🇹🇷 <strong>BDDK lisanslı bir ödeme kuruluşudur.</strong> Türkiye Cumhuriyeti yasalarına uygun ve denetimli şekilde hizmet verir.</li>
            <li class="list-group-item">🧑‍💻 <strong>Kullanıcı dostu ve hızlı ödeme deneyimi</strong> sunar – tek tıkla ödeme, taksit seçenekleri ve daha fazlası.</li>
            <li class="list-group-item">🛡️ <strong>İyzico Korumalı Alışveriş</strong> seçeneğiyle, ürün elinize ulaşmazsa paranız iade edilir.</li>
        </ul>
        <div class="alert alert-info" role="alert">
            <strong>İçiniz rahat olsun:</strong> Siparişinizi tamamlarken tüm ödeme süreci İyzico’nun yüksek güvenlik standartları ile gerçekleştirilir.
        </div>
        <p class="text-end">
            🔗 <a href="https://www.iyzico.com" target="_blank">Daha fazla bilgi için iyzico.com'u ziyaret edin →</a>
        </p>
    </div>
}

@if (relatedProducts.IsNotEmpty())
{
    <!-- Related products-->
    <div class="container pb-1">
        <h2 class="h3 pb-1">@Resource.SimilairProducts</h2>
        <div class="owl-carousel" data-owl-carousel="{ &quot;nav&quot;: false, &quot;dots&quot;: true, &quot;loop&quot;: true, &quot;margin&quot;: 15, &quot;responsive&quot;: {&quot;0&quot;:{&quot;items&quot;:1},&quot;360&quot;:{&quot;items&quot;:2}, &quot;630&quot;:{&quot;items&quot;:3}, &quot;850&quot;:{&quot;items&quot;:4}, &quot;1200&quot;:{&quot;items&quot;:5}} }">
            @foreach (var product2 in relatedProducts)
            {
                @RelatedProductItem(product2)
            }
        </div>
    </div>
}

@functions {
    public static bool ContainsValue(Dictionary<String, String> dic, String key)
    {
        return dic.ContainsKey(key) && !string.IsNullOrEmpty(dic[key]);
    }
    // Split the videoUrl by common delimiters (e.g., comma, semicolon, or newline)
    public static List<string> SplitByCommaOrSemicolonOrNewline(string videoUrl)
    {
        return Regex.Split(videoUrl ?? "", @"[,\s;\n]+")
                  .Select(url => url.Trim())
                  .Where(url => !string.IsNullOrEmpty(url))
                  .ToList();
    }
    public static string ExtractYouTubeVideoId(string url)
    {
        if (string.IsNullOrEmpty(url))
            return "";

        try
        {
            var uri = new Uri(url);

            if (uri.Host.Contains("youtu.be"))
            {
                return uri.AbsolutePath.Trim('/');
            }

            if (uri.Host.Contains("youtube.com"))
            {
                var query = HttpUtility.ParseQueryString(uri.Query);
                return query["v"];
            }
        }
        catch
        {
            // Log or handle malformed URLs if needed
        }

        return "";
    }
}

@helper CreateSocialMediaLinks(Dictionary<string, string> sharedSocialLinks)
{
    <div class="py-4">
        <span class="d-inline-block align-middle font-size-sm mr-3 mb-2">@Resource.ShareProduct:</span>
        @if (ContainsValue(sharedSocialLinks, Constants.InstagramWebSiteLink))
        {
            <a class="social-btn sb-instagram mr-2 mb-2" target="_blank" href="@sharedSocialLinks[Constants.InstagramWebSiteLink]">
                <i class="flaticon-instagram"></i>
            </a>
        }
        @if (ContainsValue(sharedSocialLinks, Constants.FacebookWebSiteLink))
        {
            <a class="social-btn sb-facebook mr-2 mb-2" target="_blank" href="@sharedSocialLinks[Constants.FacebookWebSiteLink]">
                <i class="flaticon-facebook"></i>
            </a>
        }
        @if (ContainsValue(sharedSocialLinks, Constants.TwitterWebSiteLink))
        {
            <a class="social-btn sb-twitter mr-2 mb-2" target="_blank" href="@sharedSocialLinks[Constants.TwitterWebSiteLink]">
                <i class="flaticon-twitter"></i>
            </a>
        }
        @if (ContainsValue(sharedSocialLinks, Constants.PinterestWebSiteLink))
        {
            <a class="social-btn sb-pinterest mr-2 mb-2" target="_blank" href="@sharedSocialLinks[Constants.PinterestWebSiteLink]">
                <i class="flaticon-pinterest"></i>
            </a>
        }
    </div>
}

@helper RelatedProductItem(Product product)
{
    var relatedProductImgTag = product.GetCroppedImageUrl(product.MainImageId, 300, 300);
    var shortDesc = GeneralHelper.GetDescriptionWithBody(product.ShortDescription, 100);

    <div class="product-card">
        <div class="product-thumb box-shadow-0">
            <a class="product-thumb-link" href="@product.DetailPageRelativeUrl"></a>
            <img src="@relatedProductImgTag" alt="Product">
        </div>
        <div class="product-card-body box-shadow-0">
            <div class="d-flex flex-wrap justify-content-between pb-1">
                <a class="product-meta" href="@product.DetailPageRelativeUrl">@product.Name</a>
                @if (product.Rating > 0)
                {
                    <div class="star-rating">
                        <span class="sr-label mr-1">@product.Rating</span>
                        @for (int i = 0; i < product.Rating; i++)
                        {
                            <i class="sr-star active" data-feather="star"></i>
                        }
                    </div>
                }
            </div>
            @if (product.IsBuyableState)
            {
                <h3 class="product-card-title">
                    <button class="btn btn-primary btn-sm btn-block" data-add-product-cart="@product.ModifiedId" type="button" data-toggle="toast" data-target="#cart-toast">
                        @Resource.AddToCart
                    </button>
                    <a href="@product.DetailPageRelativeUrl">@shortDesc</a>
                </h3>
                <span class="text-primary">@product.PriceWithDiscount.CurrencySign()</span>
            }
            else
            {
                <h3 class="product-card-title">
                    <a href="@product.DetailPageRelativeUrl">@shortDesc</a>
                </h3>
            }
        </div>
    </div>
}

@if (productReviewEnable)
{
    @Html.EditorFor(model => model.ProductComment, "ProductComment", new { ProductId = product.Id })
}

@helper createReviewItem(ProductComment productComment)
{
    <div class="blockquote comment border-top-0 border-left-0 border-right-0 px-0 pt-0">
        <div class="d-flex justify-content-between align-items-center pb-2">
            <div class="d-flex align-items-center">
                <h6 class="mb-0 small"><b>@productComment.Name</b></h6>
                <span class="d-none d-sm-inline mx-2 text-muted opacity-50 small">|</span>
                <span class="text-muted small">@productComment.CreatedDate.ToString("MMMM dd, yyyy")</span>
            </div>
            <div class="star-rating small">
                @for (int i = 0; i < productComment.Rating; i++)
                {
                    <i class="sr-star active" data-feather="star"></i>
                }
            </div>
        </div>
        <p class="mb-0">@Html.Raw(productComment.Review)</p>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


}